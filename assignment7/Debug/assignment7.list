
assignment7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002094  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08002244  08002244  00012244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002358  08002358  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002358  08002358  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002358  08002358  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002358  08002358  00012358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800235c  0800235c  0001235c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000074  080023d4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080023d4  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000579c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001369  00000000  00000000  00025840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000620  00000000  00000000  00026bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000558  00000000  00000000  000271d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002850d  00000000  00000000  00027728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006ddc  00000000  00000000  0004fc35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f28f9  00000000  00000000  00056a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014930a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001998  00000000  00000000  0014935c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800222c 	.word	0x0800222c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800222c 	.word	0x0800222c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <ADC_init>:
#include "ADC.h"

int ADC_lastVal = -1;
int ADC_newValFlag = 0;

void ADC_init(){
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0

	//pin PC0
	RCC->AHB2ENR |= ADC_PORT_RCC;
 8000294:	4b3d      	ldr	r3, [pc, #244]	; (800038c <ADC_init+0xfc>)
 8000296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000298:	4a3c      	ldr	r2, [pc, #240]	; (800038c <ADC_init+0xfc>)
 800029a:	f043 0304 	orr.w	r3, r3, #4
 800029e:	64d3      	str	r3, [r2, #76]	; 0x4c
	ADC_PORT->MODER |= (3<<ADC_PIN*2); //analog mode
 80002a0:	4b3b      	ldr	r3, [pc, #236]	; (8000390 <ADC_init+0x100>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a3a      	ldr	r2, [pc, #232]	; (8000390 <ADC_init+0x100>)
 80002a6:	f043 0303 	orr.w	r3, r3, #3
 80002aa:	6013      	str	r3, [r2, #0]
	ADC_PORT->OTYPER &= ~(1<<ADC_PIN*1); //push-pull
 80002ac:	4b38      	ldr	r3, [pc, #224]	; (8000390 <ADC_init+0x100>)
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	4a37      	ldr	r2, [pc, #220]	; (8000390 <ADC_init+0x100>)
 80002b2:	f023 0301 	bic.w	r3, r3, #1
 80002b6:	6053      	str	r3, [r2, #4]
	ADC_PORT->PUPDR &= ~(3<<ADC_PIN*2); //no pupd
 80002b8:	4b35      	ldr	r3, [pc, #212]	; (8000390 <ADC_init+0x100>)
 80002ba:	68db      	ldr	r3, [r3, #12]
 80002bc:	4a34      	ldr	r2, [pc, #208]	; (8000390 <ADC_init+0x100>)
 80002be:	f023 0303 	bic.w	r3, r3, #3
 80002c2:	60d3      	str	r3, [r2, #12]
	ADC_PORT->OSPEEDR |= (3<<ADC_PIN*2); //very high speed
 80002c4:	4b32      	ldr	r3, [pc, #200]	; (8000390 <ADC_init+0x100>)
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	4a31      	ldr	r2, [pc, #196]	; (8000390 <ADC_init+0x100>)
 80002ca:	f043 0303 	orr.w	r3, r3, #3
 80002ce:	6093      	str	r3, [r2, #8]

	SysTick_Init(); //delay init
 80002d0:	f000 f888 	bl	80003e4 <SysTick_Init>

	LPUART_print("adc: port init");
 80002d4:	482f      	ldr	r0, [pc, #188]	; (8000394 <ADC_init+0x104>)
 80002d6:	f000 fa59 	bl	800078c <LPUART_print>

	RCC->AHB2ENR |= ADC_PORT_RCC;
 80002da:	4b2c      	ldr	r3, [pc, #176]	; (800038c <ADC_init+0xfc>)
 80002dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002de:	4a2b      	ldr	r2, [pc, #172]	; (800038c <ADC_init+0xfc>)
 80002e0:	f043 0304 	orr.w	r3, r3, #4
 80002e4:	64d3      	str	r3, [r2, #76]	; 0x4c
	ADC1->CR &= ~ADC_CR_DEEPPWD; //exit deep-pwr down mode
 80002e6:	4b2c      	ldr	r3, [pc, #176]	; (8000398 <ADC_init+0x108>)
 80002e8:	689b      	ldr	r3, [r3, #8]
 80002ea:	4a2b      	ldr	r2, [pc, #172]	; (8000398 <ADC_init+0x108>)
 80002ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80002f0:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADVREGEN; //turn on vreg
 80002f2:	4b29      	ldr	r3, [pc, #164]	; (8000398 <ADC_init+0x108>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	4a28      	ldr	r2, [pc, #160]	; (8000398 <ADC_init+0x108>)
 80002f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002fc:	6093      	str	r3, [r2, #8]
	delay_us(20); //wait 20us
 80002fe:	2014      	movs	r0, #20
 8000300:	f000 f886 	bl	8000410 <delay_us>
	ADC1->CR &= ~ADC_CR_ADCALDIF; //set single-ended inputs
 8000304:	4b24      	ldr	r3, [pc, #144]	; (8000398 <ADC_init+0x108>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	4a23      	ldr	r2, [pc, #140]	; (8000398 <ADC_init+0x108>)
 800030a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800030e:	6093      	str	r3, [r2, #8]

	LPUART_print(", ADC init setup");
 8000310:	4822      	ldr	r0, [pc, #136]	; (800039c <ADC_init+0x10c>)
 8000312:	f000 fa3b 	bl	800078c <LPUART_print>

	//set cal bit and wait until cal is done
	ADC1->CR |= ADC_CR_ADCAL;
 8000316:	4b20      	ldr	r3, [pc, #128]	; (8000398 <ADC_init+0x108>)
 8000318:	689b      	ldr	r3, [r3, #8]
 800031a:	4a1f      	ldr	r2, [pc, #124]	; (8000398 <ADC_init+0x108>)
 800031c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000320:	6093      	str	r3, [r2, #8]
	while((ADC1->CR && ADC_CR_ADCAL));
 8000322:	bf00      	nop
 8000324:	4b1c      	ldr	r3, [pc, #112]	; (8000398 <ADC_init+0x108>)
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d1fb      	bne.n	8000324 <ADC_init+0x94>

	LPUART_print(", cal done");
 800032c:	481c      	ldr	r0, [pc, #112]	; (80003a0 <ADC_init+0x110>)
 800032e:	f000 fa2d 	bl	800078c <LPUART_print>

	ADC1->ISR |= (ADC_ISR_ADRDY); // set the ready bit to 1
 8000332:	4b19      	ldr	r3, [pc, #100]	; (8000398 <ADC_init+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4a18      	ldr	r2, [pc, #96]	; (8000398 <ADC_init+0x108>)
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	6013      	str	r3, [r2, #0]
	ADC1->CR |= ADC_CR_ADEN; //enable the ADC
 800033e:	4b16      	ldr	r3, [pc, #88]	; (8000398 <ADC_init+0x108>)
 8000340:	689b      	ldr	r3, [r3, #8]
 8000342:	4a15      	ldr	r2, [pc, #84]	; (8000398 <ADC_init+0x108>)
 8000344:	f043 0301 	orr.w	r3, r3, #1
 8000348:	6093      	str	r3, [r2, #8]
	ADC1->IER |= ADC_IER_ADRDYIE;
 800034a:	4b13      	ldr	r3, [pc, #76]	; (8000398 <ADC_init+0x108>)
 800034c:	685b      	ldr	r3, [r3, #4]
 800034e:	4a12      	ldr	r2, [pc, #72]	; (8000398 <ADC_init+0x108>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	6053      	str	r3, [r2, #4]
	while(!(ADC1->ISR && ADC_ISR_ADRDY)); //wait for ready flag to be high
 8000356:	bf00      	nop
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <ADC_init+0x108>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0fb      	beq.n	8000358 <ADC_init+0xc8>
	ADC1->ISR |= (ADC_ISR_ADRDY); //set ready bit to 1
 8000360:	4b0d      	ldr	r3, [pc, #52]	; (8000398 <ADC_init+0x108>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a0c      	ldr	r2, [pc, #48]	; (8000398 <ADC_init+0x108>)
 8000366:	f043 0301 	orr.w	r3, r3, #1
 800036a:	6013      	str	r3, [r2, #0]

	LPUART_print(", ready enabled");
 800036c:	480d      	ldr	r0, [pc, #52]	; (80003a4 <ADC_init+0x114>)
 800036e:	f000 fa0d 	bl	800078c <LPUART_print>

	NVIC->ISER[0] |= (1 << (ADC1_IRQn & 0x1F)); //set NVICint
 8000372:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <ADC_init+0x118>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4a0c      	ldr	r2, [pc, #48]	; (80003a8 <ADC_init+0x118>)
 8000378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800037c:	6013      	str	r3, [r2, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800037e:	b662      	cpsie	i
}
 8000380:	bf00      	nop
	__enable_irq();

	LPUART_print(", irq init");
 8000382:	480a      	ldr	r0, [pc, #40]	; (80003ac <ADC_init+0x11c>)
 8000384:	f000 fa02 	bl	800078c <LPUART_print>
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}
 800038c:	40021000 	.word	0x40021000
 8000390:	48000800 	.word	0x48000800
 8000394:	08002244 	.word	0x08002244
 8000398:	50040000 	.word	0x50040000
 800039c:	08002254 	.word	0x08002254
 80003a0:	08002268 	.word	0x08002268
 80003a4:	08002274 	.word	0x08002274
 80003a8:	e000e100 	.word	0xe000e100
 80003ac:	08002284 	.word	0x08002284

080003b0 <ADC1_2_IRQHandler>:

void ADC1_IRQHandler(){
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
	if ((ADC1->ISR && ADC_ISR_EOC) != 0) {
 80003b4:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <ADC1_2_IRQHandler+0x28>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d007      	beq.n	80003cc <ADC1_2_IRQHandler+0x1c>
		ADC_lastVal = ADC1->DR;
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <ADC1_2_IRQHandler+0x28>)
 80003be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003c0:	461a      	mov	r2, r3
 80003c2:	4b06      	ldr	r3, [pc, #24]	; (80003dc <ADC1_2_IRQHandler+0x2c>)
 80003c4:	601a      	str	r2, [r3, #0]
		ADC_newValFlag = 1;
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <ADC1_2_IRQHandler+0x30>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	601a      	str	r2, [r3, #0]
	}
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	50040000 	.word	0x50040000
 80003dc:	20000000 	.word	0x20000000
 80003e0:	20000090 	.word	0x20000090

080003e4 <SysTick_Init>:
#include "delay.h"

void SysTick_Init(void) {
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |     	// enable SysTick Timer
 80003e8:	4b08      	ldr	r3, [pc, #32]	; (800040c <SysTick_Init+0x28>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a07      	ldr	r2, [pc, #28]	; (800040c <SysTick_Init+0x28>)
 80003ee:	f043 0305 	orr.w	r3, r3, #5
 80003f2:	6013      	str	r3, [r2, #0]
                      SysTick_CTRL_CLKSOURCE_Msk); 	// select CPU clock
	SysTick->CTRL &= ~(SysTick_CTRL_TICKINT_Msk);  	// disable interrupt
 80003f4:	4b05      	ldr	r3, [pc, #20]	; (800040c <SysTick_Init+0x28>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a04      	ldr	r2, [pc, #16]	; (800040c <SysTick_Init+0x28>)
 80003fa:	f023 0302 	bic.w	r3, r3, #2
 80003fe:	6013      	str	r3, [r2, #0]
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	e000e010 	.word	0xe000e010

08000410 <delay_us>:

// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : results in longer delays than specified:
//	   e.g. @4MHz, delay_us(1) = 10=15 us delay.
void delay_us(const uint32_t time_us) {
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	// set the counts for the specified delay
	SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 8000418:	4b11      	ldr	r3, [pc, #68]	; (8000460 <delay_us+0x50>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a11      	ldr	r2, [pc, #68]	; (8000464 <delay_us+0x54>)
 800041e:	fba2 2303 	umull	r2, r3, r2, r3
 8000422:	0c9b      	lsrs	r3, r3, #18
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	fb02 f303 	mul.w	r3, r2, r3
 800042a:	4a0f      	ldr	r2, [pc, #60]	; (8000468 <delay_us+0x58>)
 800042c:	3b01      	subs	r3, #1
 800042e:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;                                  	 // clear timer count
 8000430:	4b0d      	ldr	r3, [pc, #52]	; (8000468 <delay_us+0x58>)
 8000432:	2200      	movs	r2, #0
 8000434:	609a      	str	r2, [r3, #8]
	SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);    	 // clear count flag
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <delay_us+0x58>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a0b      	ldr	r2, [pc, #44]	; (8000468 <delay_us+0x58>)
 800043c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000440:	6013      	str	r3, [r2, #0]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for flag
 8000442:	bf00      	nop
 8000444:	4b08      	ldr	r3, [pc, #32]	; (8000468 <delay_us+0x58>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800044c:	2b00      	cmp	r3, #0
 800044e:	d0f9      	beq.n	8000444 <delay_us+0x34>
}
 8000450:	bf00      	nop
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	20000004 	.word	0x20000004
 8000464:	431bde83 	.word	0x431bde83
 8000468:	e000e010 	.word	0xe000e010

0800046c <main>:
#include "uart.h"

void SystemClock_Config(void);

int main(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
  HAL_Init(); //reset of all peripherals, initializes the flash interface and the systick
 8000472:	f000 fa76 	bl	8000962 <HAL_Init>
  SystemClock_Config(); //configure the system clock
 8000476:	f000 f827 	bl	80004c8 <SystemClock_Config>

  LPUART_init();
 800047a:	f000 f907 	bl	800068c <LPUART_init>
  LPUART_print("sys init");
 800047e:	480d      	ldr	r0, [pc, #52]	; (80004b4 <main+0x48>)
 8000480:	f000 f984 	bl	800078c <LPUART_print>

  ADC_init();
 8000484:	f7ff ff04 	bl	8000290 <ADC_init>

  extern int ADC_lastVal;
  extern int ADC_newValFlag;

  LPUART_print("starting");
 8000488:	480b      	ldr	r0, [pc, #44]	; (80004b8 <main+0x4c>)
 800048a:	f000 f97f 	bl	800078c <LPUART_print>

  while (1)
  {
	  if(ADC_newValFlag){
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <main+0x50>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d0fb      	beq.n	800048e <main+0x22>
		  ADC_newValFlag=0;//clear flag
 8000496:	4b09      	ldr	r3, [pc, #36]	; (80004bc <main+0x50>)
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]

		  char voltageStr[16];
		  sprintf(voltageStr, "%d", ADC_lastVal);
 800049c:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <main+0x54>)
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	463b      	mov	r3, r7
 80004a2:	4908      	ldr	r1, [pc, #32]	; (80004c4 <main+0x58>)
 80004a4:	4618      	mov	r0, r3
 80004a6:	f001 fa53 	bl	8001950 <siprintf>
		  LPUART_print(voltageStr);
 80004aa:	463b      	mov	r3, r7
 80004ac:	4618      	mov	r0, r3
 80004ae:	f000 f96d 	bl	800078c <LPUART_print>
	  if(ADC_newValFlag){
 80004b2:	e7ec      	b.n	800048e <main+0x22>
 80004b4:	08002290 	.word	0x08002290
 80004b8:	0800229c 	.word	0x0800229c
 80004bc:	20000090 	.word	0x20000090
 80004c0:	20000000 	.word	0x20000000
 80004c4:	080022a8 	.word	0x080022a8

080004c8 <SystemClock_Config>:
}


//system clock config
void SystemClock_Config(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b096      	sub	sp, #88	; 0x58
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	f107 0314 	add.w	r3, r7, #20
 80004d2:	2244      	movs	r2, #68	; 0x44
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f001 fa32 	bl	8001940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004dc:	463b      	mov	r3, r7
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) Error_Handler();
 80004ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004ee:	f000 fba1 	bl	8000c34 <HAL_PWREx_ControlVoltageScaling>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0x34>
 80004f8:	f000 f82c 	bl	8000554 <Error_Handler>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004fc:	2310      	movs	r3, #16
 80004fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000500:	2301      	movs	r3, #1
 8000502:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000504:	2300      	movs	r3, #0
 8000506:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000508:	2360      	movs	r3, #96	; 0x60
 800050a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800050c:	2300      	movs	r3, #0
 800050e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) Error_Handler();
 8000510:	f107 0314 	add.w	r3, r7, #20
 8000514:	4618      	mov	r0, r3
 8000516:	f000 fbe3 	bl	8000ce0 <HAL_RCC_OscConfig>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <SystemClock_Config+0x5c>
 8000520:	f000 f818 	bl	8000554 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8000524:	230f      	movs	r3, #15
 8000526:	603b      	str	r3, [r7, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000528:	2300      	movs	r3, #0
 800052a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000530:	2300      	movs	r3, #0
 8000532:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000534:	2300      	movs	r3, #0
 8000536:	613b      	str	r3, [r7, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) Error_Handler();
 8000538:	463b      	mov	r3, r7
 800053a:	2100      	movs	r1, #0
 800053c:	4618      	mov	r0, r3
 800053e:	f000 ffe9 	bl	8001514 <HAL_RCC_ClockConfig>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x84>
 8000548:	f000 f804 	bl	8000554 <Error_Handler>
}
 800054c:	bf00      	nop
 800054e:	3758      	adds	r7, #88	; 0x58
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <Error_Handler>:

//error handler
void Error_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000558:	b672      	cpsid	i
}
 800055a:	bf00      	nop
  __disable_irq();
  while (1);
 800055c:	e7fe      	b.n	800055c <Error_Handler+0x8>
	...

08000560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000566:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <HAL_MspInit+0x44>)
 8000568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800056a:	4a0e      	ldr	r2, [pc, #56]	; (80005a4 <HAL_MspInit+0x44>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6613      	str	r3, [r2, #96]	; 0x60
 8000572:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <HAL_MspInit+0x44>)
 8000574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <HAL_MspInit+0x44>)
 8000580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000582:	4a08      	ldr	r2, [pc, #32]	; (80005a4 <HAL_MspInit+0x44>)
 8000584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000588:	6593      	str	r3, [r2, #88]	; 0x58
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <HAL_MspInit+0x44>)
 800058c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800058e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000

080005a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <NMI_Handler+0x4>

080005ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <HardFault_Handler+0x4>

080005b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <MemManage_Handler+0x4>

080005ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005be:	e7fe      	b.n	80005be <BusFault_Handler+0x4>

080005c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <UsageFault_Handler+0x4>

080005c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005f4:	f000 fa0a 	bl	8000a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}

080005fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000604:	4a14      	ldr	r2, [pc, #80]	; (8000658 <_sbrk+0x5c>)
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <_sbrk+0x60>)
 8000608:	1ad3      	subs	r3, r2, r3
 800060a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <_sbrk+0x64>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d102      	bne.n	800061e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <_sbrk+0x64>)
 800061a:	4a12      	ldr	r2, [pc, #72]	; (8000664 <_sbrk+0x68>)
 800061c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <_sbrk+0x64>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	693a      	ldr	r2, [r7, #16]
 8000628:	429a      	cmp	r2, r3
 800062a:	d207      	bcs.n	800063c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800062c:	f001 f95e 	bl	80018ec <__errno>
 8000630:	4603      	mov	r3, r0
 8000632:	220c      	movs	r2, #12
 8000634:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	e009      	b.n	8000650 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <_sbrk+0x64>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000642:	4b07      	ldr	r3, [pc, #28]	; (8000660 <_sbrk+0x64>)
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4413      	add	r3, r2
 800064a:	4a05      	ldr	r2, [pc, #20]	; (8000660 <_sbrk+0x64>)
 800064c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800064e:	68fb      	ldr	r3, [r7, #12]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3718      	adds	r7, #24
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20050000 	.word	0x20050000
 800065c:	00000400 	.word	0x00000400
 8000660:	20000094 	.word	0x20000094
 8000664:	200000b0 	.word	0x200000b0

08000668 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <SystemInit+0x20>)
 800066e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000672:	4a05      	ldr	r2, [pc, #20]	; (8000688 <SystemInit+0x20>)
 8000674:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000678:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <LPUART_init>:
#include "uart.h"

void LPUART_init(){
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
	//power avail and RCC config
	PWR->CR2 |= (PWR_CR2_IOSV);
 8000690:	4b39      	ldr	r3, [pc, #228]	; (8000778 <LPUART_init+0xec>)
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	4a38      	ldr	r2, [pc, #224]	; (8000778 <LPUART_init+0xec>)
 8000696:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800069a:	6053      	str	r3, [r2, #4]
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOGEN);
 800069c:	4b37      	ldr	r3, [pc, #220]	; (800077c <LPUART_init+0xf0>)
 800069e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a0:	4a36      	ldr	r2, [pc, #216]	; (800077c <LPUART_init+0xf0>)
 80006a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a6:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB1ENR2 |= RCC_APB1ENR2_LPUART1EN;
 80006a8:	4b34      	ldr	r3, [pc, #208]	; (800077c <LPUART_init+0xf0>)
 80006aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80006ac:	4a33      	ldr	r2, [pc, #204]	; (800077c <LPUART_init+0xf0>)
 80006ae:	f043 0301 	orr.w	r3, r3, #1
 80006b2:	65d3      	str	r3, [r2, #92]	; 0x5c

	//GPIOG pins and Alt Func config
	//PG7 (TX) and PG8 (RX)
	GPIOG->MODER &= ~(GPIO_MODER_MODE7 | GPIO_MODER_MODE8);
 80006b4:	4b32      	ldr	r3, [pc, #200]	; (8000780 <LPUART_init+0xf4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a31      	ldr	r2, [pc, #196]	; (8000780 <LPUART_init+0xf4>)
 80006ba:	f423 3370 	bic.w	r3, r3, #245760	; 0x3c000
 80006be:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= (GPIO_MODER_MODE7_1 | GPIO_MODER_MODE8_1); //AF mode
 80006c0:	4b2f      	ldr	r3, [pc, #188]	; (8000780 <LPUART_init+0xf4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a2e      	ldr	r2, [pc, #184]	; (8000780 <LPUART_init+0xf4>)
 80006c6:	f443 3320 	orr.w	r3, r3, #163840	; 0x28000
 80006ca:	6013      	str	r3, [r2, #0]
	GPIOG->OTYPER &= ~(GPIO_PIN_7 | GPIO_PIN_8);
 80006cc:	4b2c      	ldr	r3, [pc, #176]	; (8000780 <LPUART_init+0xf4>)
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	4a2b      	ldr	r2, [pc, #172]	; (8000780 <LPUART_init+0xf4>)
 80006d2:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 80006d6:	6053      	str	r3, [r2, #4]
	GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPD7 | GPIO_PUPDR_PUPD8);
 80006d8:	4b29      	ldr	r3, [pc, #164]	; (8000780 <LPUART_init+0xf4>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	4a28      	ldr	r2, [pc, #160]	; (8000780 <LPUART_init+0xf4>)
 80006de:	f423 3370 	bic.w	r3, r3, #245760	; 0x3c000
 80006e2:	60d3      	str	r3, [r2, #12]
	GPIOG->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED7 | GPIO_OSPEEDR_OSPEED8);
 80006e4:	4b26      	ldr	r3, [pc, #152]	; (8000780 <LPUART_init+0xf4>)
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	4a25      	ldr	r2, [pc, #148]	; (8000780 <LPUART_init+0xf4>)
 80006ea:	f423 3370 	bic.w	r3, r3, #245760	; 0x3c000
 80006ee:	6093      	str	r3, [r2, #8]
	GPIOG->AFR[0] &= ~(GPIO_AFRL_AFSEL7); //pin7 AF to FN8
 80006f0:	4b23      	ldr	r3, [pc, #140]	; (8000780 <LPUART_init+0xf4>)
 80006f2:	6a1b      	ldr	r3, [r3, #32]
 80006f4:	4a22      	ldr	r2, [pc, #136]	; (8000780 <LPUART_init+0xf4>)
 80006f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80006fa:	6213      	str	r3, [r2, #32]
	GPIOG->AFR[0] |= (GPIO_AFRL_AFSEL7_3);
 80006fc:	4b20      	ldr	r3, [pc, #128]	; (8000780 <LPUART_init+0xf4>)
 80006fe:	6a1b      	ldr	r3, [r3, #32]
 8000700:	4a1f      	ldr	r2, [pc, #124]	; (8000780 <LPUART_init+0xf4>)
 8000702:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000706:	6213      	str	r3, [r2, #32]
	GPIOG->AFR[1] &= ~(GPIO_AFRH_AFSEL8); //pin8 AF to FN8
 8000708:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <LPUART_init+0xf4>)
 800070a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800070c:	4a1c      	ldr	r2, [pc, #112]	; (8000780 <LPUART_init+0xf4>)
 800070e:	f023 030f 	bic.w	r3, r3, #15
 8000712:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL8_3);
 8000714:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <LPUART_init+0xf4>)
 8000716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000718:	4a19      	ldr	r2, [pc, #100]	; (8000780 <LPUART_init+0xf4>)
 800071a:	f043 0308 	orr.w	r3, r3, #8
 800071e:	6253      	str	r3, [r2, #36]	; 0x24

	//UART control reg config
	LPUART1->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); //8b data mode
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <LPUART_init+0xf8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a17      	ldr	r2, [pc, #92]	; (8000784 <LPUART_init+0xf8>)
 8000726:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 800072a:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_UE; //en LPUART1
 800072c:	4b15      	ldr	r3, [pc, #84]	; (8000784 <LPUART_init+0xf8>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a14      	ldr	r2, [pc, #80]	; (8000784 <LPUART_init+0xf8>)
 8000732:	f043 0301 	orr.w	r3, r3, #1
 8000736:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= (USART_CR1_TE | USART_CR1_RE); //en xmit & recv
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <LPUART_init+0xf8>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	; (8000784 <LPUART_init+0xf8>)
 800073e:	f043 030c 	orr.w	r3, r3, #12
 8000742:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_RXNEIE; //en LPUART1 recv int
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <LPUART_init+0xf8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <LPUART_init+0xf8>)
 800074a:	f043 0320 	orr.w	r3, r3, #32
 800074e:	6013      	str	r3, [r2, #0]
	LPUART1->ISR &= ~(USART_ISR_RXNE); //clr Recv-Not-Empty flag
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <LPUART_init+0xf8>)
 8000752:	69db      	ldr	r3, [r3, #28]
 8000754:	4a0b      	ldr	r2, [pc, #44]	; (8000784 <LPUART_init+0xf8>)
 8000756:	f023 0320 	bic.w	r3, r3, #32
 800075a:	61d3      	str	r3, [r2, #28]
	LPUART1->BRR = 256*_sys_clk/LPUART_baudRate; //set baud-rate reg
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <LPUART_init+0xf8>)
 800075e:	f242 328e 	movw	r2, #9102	; 0x238e
 8000762:	60da      	str	r2, [r3, #12]

	NVIC->ISER[2] = (1 << (LPUART1_IRQn & 0x1F));   //en LPUART1 ISR
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <LPUART_init+0xfc>)
 8000766:	2240      	movs	r2, #64	; 0x40
 8000768:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800076a:	b662      	cpsie	i
}
 800076c:	bf00      	nop
	__enable_irq();
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	40007000 	.word	0x40007000
 800077c:	40021000 	.word	0x40021000
 8000780:	48001800 	.word	0x48001800
 8000784:	40008000 	.word	0x40008000
 8000788:	e000e100 	.word	0xe000e100

0800078c <LPUART_print>:

void LPUART_print(const char* message){
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	//send chars until empty
	uint16_t iStrIdx = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	81fb      	strh	r3, [r7, #14]
	while(message[iStrIdx]!=0){
 8000798:	e010      	b.n	80007bc <LPUART_print+0x30>
		while(!(LPUART1->ISR & USART_ISR_TXE));
 800079a:	bf00      	nop
 800079c:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <LPUART_print+0x4c>)
 800079e:	69db      	ldr	r3, [r3, #28]
 80007a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d0f9      	beq.n	800079c <LPUART_print+0x10>
		LPUART1->TDR = message[iStrIdx++];
 80007a8:	89fb      	ldrh	r3, [r7, #14]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	81fa      	strh	r2, [r7, #14]
 80007ae:	461a      	mov	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4413      	add	r3, r2
 80007b4:	781a      	ldrb	r2, [r3, #0]
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <LPUART_print+0x4c>)
 80007b8:	b292      	uxth	r2, r2
 80007ba:	851a      	strh	r2, [r3, #40]	; 0x28
	while(message[iStrIdx]!=0){
 80007bc:	89fb      	ldrh	r3, [r7, #14]
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	4413      	add	r3, r2
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d1e8      	bne.n	800079a <LPUART_print+0xe>
	}
}
 80007c8:	bf00      	nop
 80007ca:	bf00      	nop
 80007cc:	3714      	adds	r7, #20
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40008000 	.word	0x40008000

080007dc <LPUART_printESC>:

void LPUART_printESC(const char* message){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	LPUART_print("\x1B");//ESC
 80007e4:	4806      	ldr	r0, [pc, #24]	; (8000800 <LPUART_printESC+0x24>)
 80007e6:	f7ff ffd1 	bl	800078c <LPUART_print>
	LPUART_print("[");
 80007ea:	4806      	ldr	r0, [pc, #24]	; (8000804 <LPUART_printESC+0x28>)
 80007ec:	f7ff ffce 	bl	800078c <LPUART_print>
	LPUART_print(message);
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff ffcb 	bl	800078c <LPUART_print>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	080022ac 	.word	0x080022ac
 8000804:	080022b0 	.word	0x080022b0

08000808 <LPUART1_IRQHandler>:

void LPUART1_IRQHandler(void){
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
	//if data is in recieve buffer then read and decode
    uint8_t character;
	if (LPUART1->ISR & USART_ISR_RXNE){
 800080e:	4b2f      	ldr	r3, [pc, #188]	; (80008cc <LPUART1_IRQHandler+0xc4>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	f003 0320 	and.w	r3, r3, #32
 8000816:	2b00      	cmp	r3, #0
 8000818:	d052      	beq.n	80008c0 <LPUART1_IRQHandler+0xb8>
	  character = LPUART1->RDR;
 800081a:	4b2c      	ldr	r3, [pc, #176]	; (80008cc <LPUART1_IRQHandler+0xc4>)
 800081c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800081e:	b29b      	uxth	r3, r3
 8000820:	71fb      	strb	r3, [r7, #7]
	  switch(character){
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	3b42      	subs	r3, #66	; 0x42
 8000826:	2b15      	cmp	r3, #21
 8000828:	d83e      	bhi.n	80008a8 <LPUART1_IRQHandler+0xa0>
 800082a:	a201      	add	r2, pc, #4	; (adr r2, 8000830 <LPUART1_IRQHandler+0x28>)
 800082c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000830:	08000899 	.word	0x08000899
 8000834:	080008a9 	.word	0x080008a9
 8000838:	080008a9 	.word	0x080008a9
 800083c:	080008a9 	.word	0x080008a9
 8000840:	080008a9 	.word	0x080008a9
 8000844:	08000891 	.word	0x08000891
 8000848:	080008a9 	.word	0x080008a9
 800084c:	080008a9 	.word	0x080008a9
 8000850:	080008a9 	.word	0x080008a9
 8000854:	080008a9 	.word	0x080008a9
 8000858:	080008a9 	.word	0x080008a9
 800085c:	080008a9 	.word	0x080008a9
 8000860:	080008a9 	.word	0x080008a9
 8000864:	080008a9 	.word	0x080008a9
 8000868:	080008a9 	.word	0x080008a9
 800086c:	080008a9 	.word	0x080008a9
 8000870:	08000889 	.word	0x08000889
 8000874:	080008a9 	.word	0x080008a9
 8000878:	080008a9 	.word	0x080008a9
 800087c:	080008a9 	.word	0x080008a9
 8000880:	080008a9 	.word	0x080008a9
 8000884:	080008a1 	.word	0x080008a1
	   case 'R':
		   LPUART_setTextColor(1);
 8000888:	2001      	movs	r0, #1
 800088a:	f000 f821 	bl	80008d0 <LPUART_setTextColor>
		   break;
 800088e:	e018      	b.n	80008c2 <LPUART1_IRQHandler+0xba>
	   case 'G':
		   LPUART_setTextColor(2);
 8000890:	2002      	movs	r0, #2
 8000892:	f000 f81d 	bl	80008d0 <LPUART_setTextColor>
		   break;
 8000896:	e014      	b.n	80008c2 <LPUART1_IRQHandler+0xba>
	   case 'B':
		   LPUART_setTextColor(4);
 8000898:	2004      	movs	r0, #4
 800089a:	f000 f819 	bl	80008d0 <LPUART_setTextColor>
		   break;
 800089e:	e010      	b.n	80008c2 <LPUART1_IRQHandler+0xba>
	   case 'W':
		   LPUART_setTextColor(7);
 80008a0:	2007      	movs	r0, #7
 80008a2:	f000 f815 	bl	80008d0 <LPUART_setTextColor>
		   break;
 80008a6:	e00c      	b.n	80008c2 <LPUART1_IRQHandler+0xba>
	   default:
		  while(!(LPUART1->ISR & USART_ISR_TXE));
 80008a8:	bf00      	nop
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <LPUART1_IRQHandler+0xc4>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d0f9      	beq.n	80008aa <LPUART1_IRQHandler+0xa2>
		  LPUART1->TDR = character;
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <LPUART1_IRQHandler+0xc4>)
 80008b8:	79fa      	ldrb	r2, [r7, #7]
 80008ba:	b292      	uxth	r2, r2
 80008bc:	851a      	strh	r2, [r3, #40]	; 0x28
	  }
	}
}
 80008be:	e000      	b.n	80008c2 <LPUART1_IRQHandler+0xba>
	}
 80008c0:	bf00      	nop
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40008000 	.word	0x40008000

080008d0 <LPUART_setTextColor>:

void LPUART_setBlink(){
	LPUART_printESC("5m");
}

void LPUART_setTextColor(unsigned int color){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	char colorStr[16];
	sprintf(colorStr, "%d", color);
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	4909      	ldr	r1, [pc, #36]	; (8000904 <LPUART_setTextColor+0x34>)
 80008e0:	4618      	mov	r0, r3
 80008e2:	f001 f835 	bl	8001950 <siprintf>
	LPUART_printESC("3");
 80008e6:	4808      	ldr	r0, [pc, #32]	; (8000908 <LPUART_setTextColor+0x38>)
 80008e8:	f7ff ff78 	bl	80007dc <LPUART_printESC>
	LPUART_print(colorStr);
 80008ec:	f107 0308 	add.w	r3, r7, #8
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff4b 	bl	800078c <LPUART_print>
	LPUART_print("m");
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <LPUART_setTextColor+0x3c>)
 80008f8:	f7ff ff48 	bl	800078c <LPUART_print>
}
 80008fc:	bf00      	nop
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	080022b4 	.word	0x080022b4
 8000908:	080022d8 	.word	0x080022d8
 800090c:	080022dc 	.word	0x080022dc

08000910 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000948 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000914:	f7ff fea8 	bl	8000668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000918:	480c      	ldr	r0, [pc, #48]	; (800094c <LoopForever+0x6>)
  ldr r1, =_edata
 800091a:	490d      	ldr	r1, [pc, #52]	; (8000950 <LoopForever+0xa>)
  ldr r2, =_sidata
 800091c:	4a0d      	ldr	r2, [pc, #52]	; (8000954 <LoopForever+0xe>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000920:	e002      	b.n	8000928 <LoopCopyDataInit>

08000922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000926:	3304      	adds	r3, #4

08000928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800092c:	d3f9      	bcc.n	8000922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092e:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000930:	4c0a      	ldr	r4, [pc, #40]	; (800095c <LoopForever+0x16>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000934:	e001      	b.n	800093a <LoopFillZerobss>

08000936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000938:	3204      	adds	r2, #4

0800093a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800093c:	d3fb      	bcc.n	8000936 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800093e:	f000 ffdb 	bl	80018f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000942:	f7ff fd93 	bl	800046c <main>

08000946 <LoopForever>:

LoopForever:
    b LoopForever
 8000946:	e7fe      	b.n	8000946 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000948:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800094c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000950:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000954:	08002360 	.word	0x08002360
  ldr r2, =_sbss
 8000958:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800095c:	200000ac 	.word	0x200000ac

08000960 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000960:	e7fe      	b.n	8000960 <ADC3_IRQHandler>

08000962 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000968:	2300      	movs	r3, #0
 800096a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800096c:	2003      	movs	r0, #3
 800096e:	f000 f91f 	bl	8000bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000972:	200f      	movs	r0, #15
 8000974:	f000 f80e 	bl	8000994 <HAL_InitTick>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d002      	beq.n	8000984 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	71fb      	strb	r3, [r7, #7]
 8000982:	e001      	b.n	8000988 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000984:	f7ff fdec 	bl	8000560 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000988:	79fb      	ldrb	r3, [r7, #7]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800099c:	2300      	movs	r3, #0
 800099e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009a0:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <HAL_InitTick+0x6c>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d023      	beq.n	80009f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009a8:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <HAL_InitTick+0x70>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <HAL_InitTick+0x6c>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	4619      	mov	r1, r3
 80009b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 f91d 	bl	8000bfe <HAL_SYSTICK_Config>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d10f      	bne.n	80009ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2b0f      	cmp	r3, #15
 80009ce:	d809      	bhi.n	80009e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d0:	2200      	movs	r2, #0
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	f04f 30ff 	mov.w	r0, #4294967295
 80009d8:	f000 f8f5 	bl	8000bc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009dc:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <HAL_InitTick+0x74>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6013      	str	r3, [r2, #0]
 80009e2:	e007      	b.n	80009f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009e4:	2301      	movs	r3, #1
 80009e6:	73fb      	strb	r3, [r7, #15]
 80009e8:	e004      	b.n	80009f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	73fb      	strb	r3, [r7, #15]
 80009ee:	e001      	b.n	80009f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009f0:	2301      	movs	r3, #1
 80009f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	2000000c 	.word	0x2000000c
 8000a04:	20000004 	.word	0x20000004
 8000a08:	20000008 	.word	0x20000008

08000a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_IncTick+0x20>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_IncTick+0x24>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <HAL_IncTick+0x24>)
 8000a1e:	6013      	str	r3, [r2, #0]
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	2000000c 	.word	0x2000000c
 8000a30:	20000098 	.word	0x20000098

08000a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return uwTick;
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <HAL_GetTick+0x14>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000098 	.word	0x20000098

08000a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7e:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	60d3      	str	r3, [r2, #12]
}
 8000a84:	bf00      	nop
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a98:	4b04      	ldr	r3, [pc, #16]	; (8000aac <__NVIC_GetPriorityGrouping+0x18>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	0a1b      	lsrs	r3, r3, #8
 8000a9e:	f003 0307 	and.w	r3, r3, #7
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	6039      	str	r1, [r7, #0]
 8000aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	db0a      	blt.n	8000ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	490c      	ldr	r1, [pc, #48]	; (8000afc <__NVIC_SetPriority+0x4c>)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	0112      	lsls	r2, r2, #4
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad8:	e00a      	b.n	8000af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4908      	ldr	r1, [pc, #32]	; (8000b00 <__NVIC_SetPriority+0x50>)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	3b04      	subs	r3, #4
 8000ae8:	0112      	lsls	r2, r2, #4
 8000aea:	b2d2      	uxtb	r2, r2
 8000aec:	440b      	add	r3, r1
 8000aee:	761a      	strb	r2, [r3, #24]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000e100 	.word	0xe000e100
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b089      	sub	sp, #36	; 0x24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	f1c3 0307 	rsb	r3, r3, #7
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	bf28      	it	cs
 8000b22:	2304      	movcs	r3, #4
 8000b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	2b06      	cmp	r3, #6
 8000b2c:	d902      	bls.n	8000b34 <NVIC_EncodePriority+0x30>
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3b03      	subs	r3, #3
 8000b32:	e000      	b.n	8000b36 <NVIC_EncodePriority+0x32>
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	f04f 32ff 	mov.w	r2, #4294967295
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43da      	mvns	r2, r3
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	401a      	ands	r2, r3
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	fa01 f303 	lsl.w	r3, r1, r3
 8000b56:	43d9      	mvns	r1, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	4313      	orrs	r3, r2
         );
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3724      	adds	r7, #36	; 0x24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
	...

08000b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b7c:	d301      	bcc.n	8000b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e00f      	b.n	8000ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b82:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <SysTick_Config+0x40>)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b8a:	210f      	movs	r1, #15
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	f7ff ff8e 	bl	8000ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <SysTick_Config+0x40>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b9a:	4b04      	ldr	r3, [pc, #16]	; (8000bac <SysTick_Config+0x40>)
 8000b9c:	2207      	movs	r2, #7
 8000b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	e000e010 	.word	0xe000e010

08000bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ff47 	bl	8000a4c <__NVIC_SetPriorityGrouping>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b086      	sub	sp, #24
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	607a      	str	r2, [r7, #4]
 8000bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd8:	f7ff ff5c 	bl	8000a94 <__NVIC_GetPriorityGrouping>
 8000bdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	68b9      	ldr	r1, [r7, #8]
 8000be2:	6978      	ldr	r0, [r7, #20]
 8000be4:	f7ff ff8e 	bl	8000b04 <NVIC_EncodePriority>
 8000be8:	4602      	mov	r2, r0
 8000bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff5d 	bl	8000ab0 <__NVIC_SetPriority>
}
 8000bf6:	bf00      	nop
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff ffb0 	bl	8000b6c <SysTick_Config>
 8000c0c:	4603      	mov	r3, r0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	40007000 	.word	0x40007000

08000c34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c42:	d130      	bne.n	8000ca6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c44:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c50:	d038      	beq.n	8000cc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c52:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c5a:	4a1e      	ldr	r2, [pc, #120]	; (8000cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c60:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c62:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2232      	movs	r2, #50	; 0x32
 8000c68:	fb02 f303 	mul.w	r3, r2, r3
 8000c6c:	4a1b      	ldr	r2, [pc, #108]	; (8000cdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c72:	0c9b      	lsrs	r3, r3, #18
 8000c74:	3301      	adds	r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c78:	e002      	b.n	8000c80 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c80:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c82:	695b      	ldr	r3, [r3, #20]
 8000c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c8c:	d102      	bne.n	8000c94 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1f2      	bne.n	8000c7a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c96:	695b      	ldr	r3, [r3, #20]
 8000c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ca0:	d110      	bne.n	8000cc4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	e00f      	b.n	8000cc6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cb2:	d007      	beq.n	8000cc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cbc:	4a05      	ldr	r2, [pc, #20]	; (8000cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cc2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40007000 	.word	0x40007000
 8000cd8:	20000004 	.word	0x20000004
 8000cdc:	431bde83 	.word	0x431bde83

08000ce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d102      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	f000 bc08 	b.w	8001504 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cf4:	4b96      	ldr	r3, [pc, #600]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	f003 030c 	and.w	r3, r3, #12
 8000cfc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cfe:	4b94      	ldr	r3, [pc, #592]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	f003 0303 	and.w	r3, r3, #3
 8000d06:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f003 0310 	and.w	r3, r3, #16
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f000 80e4 	beq.w	8000ede <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d007      	beq.n	8000d2c <HAL_RCC_OscConfig+0x4c>
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	2b0c      	cmp	r3, #12
 8000d20:	f040 808b 	bne.w	8000e3a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	f040 8087 	bne.w	8000e3a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d2c:	4b88      	ldr	r3, [pc, #544]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 0302 	and.w	r3, r3, #2
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d005      	beq.n	8000d44 <HAL_RCC_OscConfig+0x64>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d101      	bne.n	8000d44 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	e3df      	b.n	8001504 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a1a      	ldr	r2, [r3, #32]
 8000d48:	4b81      	ldr	r3, [pc, #516]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f003 0308 	and.w	r3, r3, #8
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d004      	beq.n	8000d5e <HAL_RCC_OscConfig+0x7e>
 8000d54:	4b7e      	ldr	r3, [pc, #504]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d5c:	e005      	b.n	8000d6a <HAL_RCC_OscConfig+0x8a>
 8000d5e:	4b7c      	ldr	r3, [pc, #496]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d64:	091b      	lsrs	r3, r3, #4
 8000d66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d223      	bcs.n	8000db6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6a1b      	ldr	r3, [r3, #32]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 fd5a 	bl	800182c <RCC_SetFlashLatencyFromMSIRange>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e3c0      	b.n	8001504 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d82:	4b73      	ldr	r3, [pc, #460]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a72      	ldr	r2, [pc, #456]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000d88:	f043 0308 	orr.w	r3, r3, #8
 8000d8c:	6013      	str	r3, [r2, #0]
 8000d8e:	4b70      	ldr	r3, [pc, #448]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a1b      	ldr	r3, [r3, #32]
 8000d9a:	496d      	ldr	r1, [pc, #436]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000da0:	4b6b      	ldr	r3, [pc, #428]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69db      	ldr	r3, [r3, #28]
 8000dac:	021b      	lsls	r3, r3, #8
 8000dae:	4968      	ldr	r1, [pc, #416]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000db0:	4313      	orrs	r3, r2
 8000db2:	604b      	str	r3, [r1, #4]
 8000db4:	e025      	b.n	8000e02 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000db6:	4b66      	ldr	r3, [pc, #408]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a65      	ldr	r2, [pc, #404]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000dbc:	f043 0308 	orr.w	r3, r3, #8
 8000dc0:	6013      	str	r3, [r2, #0]
 8000dc2:	4b63      	ldr	r3, [pc, #396]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6a1b      	ldr	r3, [r3, #32]
 8000dce:	4960      	ldr	r1, [pc, #384]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dd4:	4b5e      	ldr	r3, [pc, #376]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	69db      	ldr	r3, [r3, #28]
 8000de0:	021b      	lsls	r3, r3, #8
 8000de2:	495b      	ldr	r1, [pc, #364]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000de4:	4313      	orrs	r3, r2
 8000de6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d109      	bne.n	8000e02 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a1b      	ldr	r3, [r3, #32]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 fd1a 	bl	800182c <RCC_SetFlashLatencyFromMSIRange>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e380      	b.n	8001504 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e02:	f000 fc87 	bl	8001714 <HAL_RCC_GetSysClockFreq>
 8000e06:	4602      	mov	r2, r0
 8000e08:	4b51      	ldr	r3, [pc, #324]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	091b      	lsrs	r3, r3, #4
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	4950      	ldr	r1, [pc, #320]	; (8000f54 <HAL_RCC_OscConfig+0x274>)
 8000e14:	5ccb      	ldrb	r3, [r1, r3]
 8000e16:	f003 031f 	and.w	r3, r3, #31
 8000e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e1e:	4a4e      	ldr	r2, [pc, #312]	; (8000f58 <HAL_RCC_OscConfig+0x278>)
 8000e20:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e22:	4b4e      	ldr	r3, [pc, #312]	; (8000f5c <HAL_RCC_OscConfig+0x27c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fdb4 	bl	8000994 <HAL_InitTick>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d052      	beq.n	8000edc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	e364      	b.n	8001504 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d032      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e42:	4b43      	ldr	r3, [pc, #268]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a42      	ldr	r2, [pc, #264]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e4e:	f7ff fdf1 	bl	8000a34 <HAL_GetTick>
 8000e52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e54:	e008      	b.n	8000e68 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e56:	f7ff fded 	bl	8000a34 <HAL_GetTick>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d901      	bls.n	8000e68 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	e34d      	b.n	8001504 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e68:	4b39      	ldr	r3, [pc, #228]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 0302 	and.w	r3, r3, #2
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0f0      	beq.n	8000e56 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e74:	4b36      	ldr	r3, [pc, #216]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a35      	ldr	r2, [pc, #212]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000e7a:	f043 0308 	orr.w	r3, r3, #8
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	4b33      	ldr	r3, [pc, #204]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6a1b      	ldr	r3, [r3, #32]
 8000e8c:	4930      	ldr	r1, [pc, #192]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e92:	4b2f      	ldr	r3, [pc, #188]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	021b      	lsls	r3, r3, #8
 8000ea0:	492b      	ldr	r1, [pc, #172]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	604b      	str	r3, [r1, #4]
 8000ea6:	e01a      	b.n	8000ede <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ea8:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a28      	ldr	r2, [pc, #160]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000eae:	f023 0301 	bic.w	r3, r3, #1
 8000eb2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000eb4:	f7ff fdbe 	bl	8000a34 <HAL_GetTick>
 8000eb8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000eba:	e008      	b.n	8000ece <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ebc:	f7ff fdba 	bl	8000a34 <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d901      	bls.n	8000ece <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e31a      	b.n	8001504 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ece:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d1f0      	bne.n	8000ebc <HAL_RCC_OscConfig+0x1dc>
 8000eda:	e000      	b.n	8000ede <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000edc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d073      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	2b08      	cmp	r3, #8
 8000eee:	d005      	beq.n	8000efc <HAL_RCC_OscConfig+0x21c>
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	2b0c      	cmp	r3, #12
 8000ef4:	d10e      	bne.n	8000f14 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	d10b      	bne.n	8000f14 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d063      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x2f0>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d15f      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e2f7      	b.n	8001504 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f1c:	d106      	bne.n	8000f2c <HAL_RCC_OscConfig+0x24c>
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	e025      	b.n	8000f78 <HAL_RCC_OscConfig+0x298>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f34:	d114      	bne.n	8000f60 <HAL_RCC_OscConfig+0x280>
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a05      	ldr	r2, [pc, #20]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a02      	ldr	r2, [pc, #8]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	e013      	b.n	8000f78 <HAL_RCC_OscConfig+0x298>
 8000f50:	40021000 	.word	0x40021000
 8000f54:	080022e4 	.word	0x080022e4
 8000f58:	20000004 	.word	0x20000004
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	4ba0      	ldr	r3, [pc, #640]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a9f      	ldr	r2, [pc, #636]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 8000f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	4b9d      	ldr	r3, [pc, #628]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a9c      	ldr	r2, [pc, #624]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 8000f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d013      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f80:	f7ff fd58 	bl	8000a34 <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f86:	e008      	b.n	8000f9a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f88:	f7ff fd54 	bl	8000a34 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b64      	cmp	r3, #100	; 0x64
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e2b4      	b.n	8001504 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f9a:	4b92      	ldr	r3, [pc, #584]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0f0      	beq.n	8000f88 <HAL_RCC_OscConfig+0x2a8>
 8000fa6:	e014      	b.n	8000fd2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa8:	f7ff fd44 	bl	8000a34 <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fb0:	f7ff fd40 	bl	8000a34 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b64      	cmp	r3, #100	; 0x64
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e2a0      	b.n	8001504 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fc2:	4b88      	ldr	r3, [pc, #544]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1f0      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x2d0>
 8000fce:	e000      	b.n	8000fd2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d060      	beq.n	80010a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	2b04      	cmp	r3, #4
 8000fe2:	d005      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x310>
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	2b0c      	cmp	r3, #12
 8000fe8:	d119      	bne.n	800101e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d116      	bne.n	800101e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ff0:	4b7c      	ldr	r3, [pc, #496]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d005      	beq.n	8001008 <HAL_RCC_OscConfig+0x328>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d101      	bne.n	8001008 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e27d      	b.n	8001504 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001008:	4b76      	ldr	r3, [pc, #472]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	061b      	lsls	r3, r3, #24
 8001016:	4973      	ldr	r1, [pc, #460]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 8001018:	4313      	orrs	r3, r2
 800101a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800101c:	e040      	b.n	80010a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d023      	beq.n	800106e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001026:	4b6f      	ldr	r3, [pc, #444]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a6e      	ldr	r2, [pc, #440]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 800102c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001032:	f7ff fcff 	bl	8000a34 <HAL_GetTick>
 8001036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800103a:	f7ff fcfb 	bl	8000a34 <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e25b      	b.n	8001504 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800104c:	4b65      	ldr	r3, [pc, #404]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0f0      	beq.n	800103a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001058:	4b62      	ldr	r3, [pc, #392]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	691b      	ldr	r3, [r3, #16]
 8001064:	061b      	lsls	r3, r3, #24
 8001066:	495f      	ldr	r1, [pc, #380]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 8001068:	4313      	orrs	r3, r2
 800106a:	604b      	str	r3, [r1, #4]
 800106c:	e018      	b.n	80010a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800106e:	4b5d      	ldr	r3, [pc, #372]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a5c      	ldr	r2, [pc, #368]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 8001074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800107a:	f7ff fcdb 	bl	8000a34 <HAL_GetTick>
 800107e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001080:	e008      	b.n	8001094 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001082:	f7ff fcd7 	bl	8000a34 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e237      	b.n	8001504 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001094:	4b53      	ldr	r3, [pc, #332]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1f0      	bne.n	8001082 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0308 	and.w	r3, r3, #8
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d03c      	beq.n	8001126 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d01c      	beq.n	80010ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010b4:	4b4b      	ldr	r3, [pc, #300]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 80010b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010ba:	4a4a      	ldr	r2, [pc, #296]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010c4:	f7ff fcb6 	bl	8000a34 <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010ca:	e008      	b.n	80010de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010cc:	f7ff fcb2 	bl	8000a34 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e212      	b.n	8001504 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010de:	4b41      	ldr	r3, [pc, #260]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 80010e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d0ef      	beq.n	80010cc <HAL_RCC_OscConfig+0x3ec>
 80010ec:	e01b      	b.n	8001126 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010ee:	4b3d      	ldr	r3, [pc, #244]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 80010f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010f4:	4a3b      	ldr	r2, [pc, #236]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 80010f6:	f023 0301 	bic.w	r3, r3, #1
 80010fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010fe:	f7ff fc99 	bl	8000a34 <HAL_GetTick>
 8001102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001104:	e008      	b.n	8001118 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001106:	f7ff fc95 	bl	8000a34 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e1f5      	b.n	8001504 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001118:	4b32      	ldr	r3, [pc, #200]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 800111a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1ef      	bne.n	8001106 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 80a6 	beq.w	8001280 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001134:	2300      	movs	r3, #0
 8001136:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001138:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 800113a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d10d      	bne.n	8001160 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001144:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 8001146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001148:	4a26      	ldr	r2, [pc, #152]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 800114a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114e:	6593      	str	r3, [r2, #88]	; 0x58
 8001150:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 8001152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800115c:	2301      	movs	r3, #1
 800115e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001160:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <HAL_RCC_OscConfig+0x508>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001168:	2b00      	cmp	r3, #0
 800116a:	d118      	bne.n	800119e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800116c:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <HAL_RCC_OscConfig+0x508>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a1d      	ldr	r2, [pc, #116]	; (80011e8 <HAL_RCC_OscConfig+0x508>)
 8001172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001176:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001178:	f7ff fc5c 	bl	8000a34 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001180:	f7ff fc58 	bl	8000a34 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e1b8      	b.n	8001504 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <HAL_RCC_OscConfig+0x508>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0f0      	beq.n	8001180 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d108      	bne.n	80011b8 <HAL_RCC_OscConfig+0x4d8>
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 80011a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ac:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011b6:	e029      	b.n	800120c <HAL_RCC_OscConfig+0x52c>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	2b05      	cmp	r3, #5
 80011be:	d115      	bne.n	80011ec <HAL_RCC_OscConfig+0x50c>
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 80011c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011c6:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 80011d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011d6:	4a03      	ldr	r2, [pc, #12]	; (80011e4 <HAL_RCC_OscConfig+0x504>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011e0:	e014      	b.n	800120c <HAL_RCC_OscConfig+0x52c>
 80011e2:	bf00      	nop
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40007000 	.word	0x40007000
 80011ec:	4b9d      	ldr	r3, [pc, #628]	; (8001464 <HAL_RCC_OscConfig+0x784>)
 80011ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011f2:	4a9c      	ldr	r2, [pc, #624]	; (8001464 <HAL_RCC_OscConfig+0x784>)
 80011f4:	f023 0301 	bic.w	r3, r3, #1
 80011f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011fc:	4b99      	ldr	r3, [pc, #612]	; (8001464 <HAL_RCC_OscConfig+0x784>)
 80011fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001202:	4a98      	ldr	r2, [pc, #608]	; (8001464 <HAL_RCC_OscConfig+0x784>)
 8001204:	f023 0304 	bic.w	r3, r3, #4
 8001208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d016      	beq.n	8001242 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001214:	f7ff fc0e 	bl	8000a34 <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800121a:	e00a      	b.n	8001232 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800121c:	f7ff fc0a 	bl	8000a34 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	f241 3288 	movw	r2, #5000	; 0x1388
 800122a:	4293      	cmp	r3, r2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e168      	b.n	8001504 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001232:	4b8c      	ldr	r3, [pc, #560]	; (8001464 <HAL_RCC_OscConfig+0x784>)
 8001234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0ed      	beq.n	800121c <HAL_RCC_OscConfig+0x53c>
 8001240:	e015      	b.n	800126e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001242:	f7ff fbf7 	bl	8000a34 <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001248:	e00a      	b.n	8001260 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800124a:	f7ff fbf3 	bl	8000a34 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	f241 3288 	movw	r2, #5000	; 0x1388
 8001258:	4293      	cmp	r3, r2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e151      	b.n	8001504 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001260:	4b80      	ldr	r3, [pc, #512]	; (8001464 <HAL_RCC_OscConfig+0x784>)
 8001262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1ed      	bne.n	800124a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800126e:	7ffb      	ldrb	r3, [r7, #31]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d105      	bne.n	8001280 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001274:	4b7b      	ldr	r3, [pc, #492]	; (8001464 <HAL_RCC_OscConfig+0x784>)
 8001276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001278:	4a7a      	ldr	r2, [pc, #488]	; (8001464 <HAL_RCC_OscConfig+0x784>)
 800127a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800127e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0320 	and.w	r3, r3, #32
 8001288:	2b00      	cmp	r3, #0
 800128a:	d03c      	beq.n	8001306 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	2b00      	cmp	r3, #0
 8001292:	d01c      	beq.n	80012ce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001294:	4b73      	ldr	r3, [pc, #460]	; (8001464 <HAL_RCC_OscConfig+0x784>)
 8001296:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800129a:	4a72      	ldr	r2, [pc, #456]	; (8001464 <HAL_RCC_OscConfig+0x784>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a4:	f7ff fbc6 	bl	8000a34 <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012ac:	f7ff fbc2 	bl	8000a34 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e122      	b.n	8001504 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012be:	4b69      	ldr	r3, [pc, #420]	; (8001464 <HAL_RCC_OscConfig+0x784>)
 80012c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0ef      	beq.n	80012ac <HAL_RCC_OscConfig+0x5cc>
 80012cc:	e01b      	b.n	8001306 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80012ce:	4b65      	ldr	r3, [pc, #404]	; (8001464 <HAL_RCC_OscConfig+0x784>)
 80012d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012d4:	4a63      	ldr	r2, [pc, #396]	; (8001464 <HAL_RCC_OscConfig+0x784>)
 80012d6:	f023 0301 	bic.w	r3, r3, #1
 80012da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012de:	f7ff fba9 	bl	8000a34 <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012e6:	f7ff fba5 	bl	8000a34 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e105      	b.n	8001504 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80012f8:	4b5a      	ldr	r3, [pc, #360]	; (8001464 <HAL_RCC_OscConfig+0x784>)
 80012fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1ef      	bne.n	80012e6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 80f9 	beq.w	8001502 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001314:	2b02      	cmp	r3, #2
 8001316:	f040 80cf 	bne.w	80014b8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800131a:	4b52      	ldr	r3, [pc, #328]	; (8001464 <HAL_RCC_OscConfig+0x784>)
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	f003 0203 	and.w	r2, r3, #3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132a:	429a      	cmp	r2, r3
 800132c:	d12c      	bne.n	8001388 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	3b01      	subs	r3, #1
 800133a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800133c:	429a      	cmp	r2, r3
 800133e:	d123      	bne.n	8001388 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800134a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800134c:	429a      	cmp	r2, r3
 800134e:	d11b      	bne.n	8001388 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800135c:	429a      	cmp	r2, r3
 800135e:	d113      	bne.n	8001388 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800136a:	085b      	lsrs	r3, r3, #1
 800136c:	3b01      	subs	r3, #1
 800136e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001370:	429a      	cmp	r2, r3
 8001372:	d109      	bne.n	8001388 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	085b      	lsrs	r3, r3, #1
 8001380:	3b01      	subs	r3, #1
 8001382:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001384:	429a      	cmp	r2, r3
 8001386:	d071      	beq.n	800146c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	2b0c      	cmp	r3, #12
 800138c:	d068      	beq.n	8001460 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800138e:	4b35      	ldr	r3, [pc, #212]	; (8001464 <HAL_RCC_OscConfig+0x784>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d105      	bne.n	80013a6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800139a:	4b32      	ldr	r3, [pc, #200]	; (8001464 <HAL_RCC_OscConfig+0x784>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e0ac      	b.n	8001504 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80013aa:	4b2e      	ldr	r3, [pc, #184]	; (8001464 <HAL_RCC_OscConfig+0x784>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a2d      	ldr	r2, [pc, #180]	; (8001464 <HAL_RCC_OscConfig+0x784>)
 80013b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013b6:	f7ff fb3d 	bl	8000a34 <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013be:	f7ff fb39 	bl	8000a34 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e099      	b.n	8001504 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013d0:	4b24      	ldr	r3, [pc, #144]	; (8001464 <HAL_RCC_OscConfig+0x784>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1f0      	bne.n	80013be <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013dc:	4b21      	ldr	r3, [pc, #132]	; (8001464 <HAL_RCC_OscConfig+0x784>)
 80013de:	68da      	ldr	r2, [r3, #12]
 80013e0:	4b21      	ldr	r3, [pc, #132]	; (8001468 <HAL_RCC_OscConfig+0x788>)
 80013e2:	4013      	ands	r3, r2
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013ec:	3a01      	subs	r2, #1
 80013ee:	0112      	lsls	r2, r2, #4
 80013f0:	4311      	orrs	r1, r2
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013f6:	0212      	lsls	r2, r2, #8
 80013f8:	4311      	orrs	r1, r2
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80013fe:	0852      	lsrs	r2, r2, #1
 8001400:	3a01      	subs	r2, #1
 8001402:	0552      	lsls	r2, r2, #21
 8001404:	4311      	orrs	r1, r2
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800140a:	0852      	lsrs	r2, r2, #1
 800140c:	3a01      	subs	r2, #1
 800140e:	0652      	lsls	r2, r2, #25
 8001410:	4311      	orrs	r1, r2
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001416:	06d2      	lsls	r2, r2, #27
 8001418:	430a      	orrs	r2, r1
 800141a:	4912      	ldr	r1, [pc, #72]	; (8001464 <HAL_RCC_OscConfig+0x784>)
 800141c:	4313      	orrs	r3, r2
 800141e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001420:	4b10      	ldr	r3, [pc, #64]	; (8001464 <HAL_RCC_OscConfig+0x784>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0f      	ldr	r2, [pc, #60]	; (8001464 <HAL_RCC_OscConfig+0x784>)
 8001426:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800142a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800142c:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <HAL_RCC_OscConfig+0x784>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	4a0c      	ldr	r2, [pc, #48]	; (8001464 <HAL_RCC_OscConfig+0x784>)
 8001432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001436:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001438:	f7ff fafc 	bl	8000a34 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001440:	f7ff faf8 	bl	8000a34 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e058      	b.n	8001504 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001452:	4b04      	ldr	r3, [pc, #16]	; (8001464 <HAL_RCC_OscConfig+0x784>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800145e:	e050      	b.n	8001502 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e04f      	b.n	8001504 <HAL_RCC_OscConfig+0x824>
 8001464:	40021000 	.word	0x40021000
 8001468:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800146c:	4b27      	ldr	r3, [pc, #156]	; (800150c <HAL_RCC_OscConfig+0x82c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d144      	bne.n	8001502 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001478:	4b24      	ldr	r3, [pc, #144]	; (800150c <HAL_RCC_OscConfig+0x82c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a23      	ldr	r2, [pc, #140]	; (800150c <HAL_RCC_OscConfig+0x82c>)
 800147e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001482:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001484:	4b21      	ldr	r3, [pc, #132]	; (800150c <HAL_RCC_OscConfig+0x82c>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	4a20      	ldr	r2, [pc, #128]	; (800150c <HAL_RCC_OscConfig+0x82c>)
 800148a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800148e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001490:	f7ff fad0 	bl	8000a34 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001498:	f7ff facc 	bl	8000a34 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e02c      	b.n	8001504 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014aa:	4b18      	ldr	r3, [pc, #96]	; (800150c <HAL_RCC_OscConfig+0x82c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0x7b8>
 80014b6:	e024      	b.n	8001502 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	2b0c      	cmp	r3, #12
 80014bc:	d01f      	beq.n	80014fe <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014be:	4b13      	ldr	r3, [pc, #76]	; (800150c <HAL_RCC_OscConfig+0x82c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a12      	ldr	r2, [pc, #72]	; (800150c <HAL_RCC_OscConfig+0x82c>)
 80014c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ca:	f7ff fab3 	bl	8000a34 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d2:	f7ff faaf 	bl	8000a34 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e00f      	b.n	8001504 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <HAL_RCC_OscConfig+0x82c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1f0      	bne.n	80014d2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_RCC_OscConfig+0x82c>)
 80014f2:	68da      	ldr	r2, [r3, #12]
 80014f4:	4905      	ldr	r1, [pc, #20]	; (800150c <HAL_RCC_OscConfig+0x82c>)
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_RCC_OscConfig+0x830>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	60cb      	str	r3, [r1, #12]
 80014fc:	e001      	b.n	8001502 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3720      	adds	r7, #32
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40021000 	.word	0x40021000
 8001510:	feeefffc 	.word	0xfeeefffc

08001514 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e0e7      	b.n	80016f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001528:	4b75      	ldr	r3, [pc, #468]	; (8001700 <HAL_RCC_ClockConfig+0x1ec>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d910      	bls.n	8001558 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001536:	4b72      	ldr	r3, [pc, #456]	; (8001700 <HAL_RCC_ClockConfig+0x1ec>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f023 0207 	bic.w	r2, r3, #7
 800153e:	4970      	ldr	r1, [pc, #448]	; (8001700 <HAL_RCC_ClockConfig+0x1ec>)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	4313      	orrs	r3, r2
 8001544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001546:	4b6e      	ldr	r3, [pc, #440]	; (8001700 <HAL_RCC_ClockConfig+0x1ec>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d001      	beq.n	8001558 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0cf      	b.n	80016f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d010      	beq.n	8001586 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	4b66      	ldr	r3, [pc, #408]	; (8001704 <HAL_RCC_ClockConfig+0x1f0>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001570:	429a      	cmp	r2, r3
 8001572:	d908      	bls.n	8001586 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001574:	4b63      	ldr	r3, [pc, #396]	; (8001704 <HAL_RCC_ClockConfig+0x1f0>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	4960      	ldr	r1, [pc, #384]	; (8001704 <HAL_RCC_ClockConfig+0x1f0>)
 8001582:	4313      	orrs	r3, r2
 8001584:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d04c      	beq.n	800162c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b03      	cmp	r3, #3
 8001598:	d107      	bne.n	80015aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800159a:	4b5a      	ldr	r3, [pc, #360]	; (8001704 <HAL_RCC_ClockConfig+0x1f0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d121      	bne.n	80015ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e0a6      	b.n	80016f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d107      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015b2:	4b54      	ldr	r3, [pc, #336]	; (8001704 <HAL_RCC_ClockConfig+0x1f0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d115      	bne.n	80015ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e09a      	b.n	80016f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d107      	bne.n	80015da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015ca:	4b4e      	ldr	r3, [pc, #312]	; (8001704 <HAL_RCC_ClockConfig+0x1f0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d109      	bne.n	80015ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e08e      	b.n	80016f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015da:	4b4a      	ldr	r3, [pc, #296]	; (8001704 <HAL_RCC_ClockConfig+0x1f0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e086      	b.n	80016f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015ea:	4b46      	ldr	r3, [pc, #280]	; (8001704 <HAL_RCC_ClockConfig+0x1f0>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f023 0203 	bic.w	r2, r3, #3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	4943      	ldr	r1, [pc, #268]	; (8001704 <HAL_RCC_ClockConfig+0x1f0>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015fc:	f7ff fa1a 	bl	8000a34 <HAL_GetTick>
 8001600:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001602:	e00a      	b.n	800161a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001604:	f7ff fa16 	bl	8000a34 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001612:	4293      	cmp	r3, r2
 8001614:	d901      	bls.n	800161a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e06e      	b.n	80016f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800161a:	4b3a      	ldr	r3, [pc, #232]	; (8001704 <HAL_RCC_ClockConfig+0x1f0>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 020c 	and.w	r2, r3, #12
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	429a      	cmp	r2, r3
 800162a:	d1eb      	bne.n	8001604 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d010      	beq.n	800165a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	4b31      	ldr	r3, [pc, #196]	; (8001704 <HAL_RCC_ClockConfig+0x1f0>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001644:	429a      	cmp	r2, r3
 8001646:	d208      	bcs.n	800165a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001648:	4b2e      	ldr	r3, [pc, #184]	; (8001704 <HAL_RCC_ClockConfig+0x1f0>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	492b      	ldr	r1, [pc, #172]	; (8001704 <HAL_RCC_ClockConfig+0x1f0>)
 8001656:	4313      	orrs	r3, r2
 8001658:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800165a:	4b29      	ldr	r3, [pc, #164]	; (8001700 <HAL_RCC_ClockConfig+0x1ec>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d210      	bcs.n	800168a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001668:	4b25      	ldr	r3, [pc, #148]	; (8001700 <HAL_RCC_ClockConfig+0x1ec>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f023 0207 	bic.w	r2, r3, #7
 8001670:	4923      	ldr	r1, [pc, #140]	; (8001700 <HAL_RCC_ClockConfig+0x1ec>)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	4313      	orrs	r3, r2
 8001676:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001678:	4b21      	ldr	r3, [pc, #132]	; (8001700 <HAL_RCC_ClockConfig+0x1ec>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d001      	beq.n	800168a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e036      	b.n	80016f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	2b00      	cmp	r3, #0
 8001694:	d008      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001696:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <HAL_RCC_ClockConfig+0x1f0>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	4918      	ldr	r1, [pc, #96]	; (8001704 <HAL_RCC_ClockConfig+0x1f0>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d009      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016b4:	4b13      	ldr	r3, [pc, #76]	; (8001704 <HAL_RCC_ClockConfig+0x1f0>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4910      	ldr	r1, [pc, #64]	; (8001704 <HAL_RCC_ClockConfig+0x1f0>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016c8:	f000 f824 	bl	8001714 <HAL_RCC_GetSysClockFreq>
 80016cc:	4602      	mov	r2, r0
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <HAL_RCC_ClockConfig+0x1f0>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	091b      	lsrs	r3, r3, #4
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	490b      	ldr	r1, [pc, #44]	; (8001708 <HAL_RCC_ClockConfig+0x1f4>)
 80016da:	5ccb      	ldrb	r3, [r1, r3]
 80016dc:	f003 031f 	and.w	r3, r3, #31
 80016e0:	fa22 f303 	lsr.w	r3, r2, r3
 80016e4:	4a09      	ldr	r2, [pc, #36]	; (800170c <HAL_RCC_ClockConfig+0x1f8>)
 80016e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_RCC_ClockConfig+0x1fc>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff f951 	bl	8000994 <HAL_InitTick>
 80016f2:	4603      	mov	r3, r0
 80016f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80016f6:	7afb      	ldrb	r3, [r7, #11]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40022000 	.word	0x40022000
 8001704:	40021000 	.word	0x40021000
 8001708:	080022e4 	.word	0x080022e4
 800170c:	20000004 	.word	0x20000004
 8001710:	20000008 	.word	0x20000008

08001714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001722:	4b3e      	ldr	r3, [pc, #248]	; (800181c <HAL_RCC_GetSysClockFreq+0x108>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800172c:	4b3b      	ldr	r3, [pc, #236]	; (800181c <HAL_RCC_GetSysClockFreq+0x108>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_RCC_GetSysClockFreq+0x34>
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	2b0c      	cmp	r3, #12
 8001740:	d121      	bne.n	8001786 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d11e      	bne.n	8001786 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001748:	4b34      	ldr	r3, [pc, #208]	; (800181c <HAL_RCC_GetSysClockFreq+0x108>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	2b00      	cmp	r3, #0
 8001752:	d107      	bne.n	8001764 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001754:	4b31      	ldr	r3, [pc, #196]	; (800181c <HAL_RCC_GetSysClockFreq+0x108>)
 8001756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800175a:	0a1b      	lsrs	r3, r3, #8
 800175c:	f003 030f 	and.w	r3, r3, #15
 8001760:	61fb      	str	r3, [r7, #28]
 8001762:	e005      	b.n	8001770 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001764:	4b2d      	ldr	r3, [pc, #180]	; (800181c <HAL_RCC_GetSysClockFreq+0x108>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001770:	4a2b      	ldr	r2, [pc, #172]	; (8001820 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001778:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10d      	bne.n	800179c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001784:	e00a      	b.n	800179c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	2b04      	cmp	r3, #4
 800178a:	d102      	bne.n	8001792 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800178c:	4b25      	ldr	r3, [pc, #148]	; (8001824 <HAL_RCC_GetSysClockFreq+0x110>)
 800178e:	61bb      	str	r3, [r7, #24]
 8001790:	e004      	b.n	800179c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	2b08      	cmp	r3, #8
 8001796:	d101      	bne.n	800179c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001798:	4b23      	ldr	r3, [pc, #140]	; (8001828 <HAL_RCC_GetSysClockFreq+0x114>)
 800179a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	2b0c      	cmp	r3, #12
 80017a0:	d134      	bne.n	800180c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017a2:	4b1e      	ldr	r3, [pc, #120]	; (800181c <HAL_RCC_GetSysClockFreq+0x108>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d003      	beq.n	80017ba <HAL_RCC_GetSysClockFreq+0xa6>
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	d003      	beq.n	80017c0 <HAL_RCC_GetSysClockFreq+0xac>
 80017b8:	e005      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017ba:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <HAL_RCC_GetSysClockFreq+0x110>)
 80017bc:	617b      	str	r3, [r7, #20]
      break;
 80017be:	e005      	b.n	80017cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <HAL_RCC_GetSysClockFreq+0x114>)
 80017c2:	617b      	str	r3, [r7, #20]
      break;
 80017c4:	e002      	b.n	80017cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	617b      	str	r3, [r7, #20]
      break;
 80017ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <HAL_RCC_GetSysClockFreq+0x108>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	3301      	adds	r3, #1
 80017d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <HAL_RCC_GetSysClockFreq+0x108>)
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	0a1b      	lsrs	r3, r3, #8
 80017e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	fb03 f202 	mul.w	r2, r3, r2
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_RCC_GetSysClockFreq+0x108>)
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	0e5b      	lsrs	r3, r3, #25
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	3301      	adds	r3, #1
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	fbb2 f3f3 	udiv	r3, r2, r3
 800180a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800180c:	69bb      	ldr	r3, [r7, #24]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3724      	adds	r7, #36	; 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000
 8001820:	080022f4 	.word	0x080022f4
 8001824:	00f42400 	.word	0x00f42400
 8001828:	007a1200 	.word	0x007a1200

0800182c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001834:	2300      	movs	r3, #0
 8001836:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001838:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800183a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001844:	f7ff f9e8 	bl	8000c18 <HAL_PWREx_GetVoltageRange>
 8001848:	6178      	str	r0, [r7, #20]
 800184a:	e014      	b.n	8001876 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800184c:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800184e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001850:	4a24      	ldr	r2, [pc, #144]	; (80018e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001856:	6593      	str	r3, [r2, #88]	; 0x58
 8001858:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800185a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001864:	f7ff f9d8 	bl	8000c18 <HAL_PWREx_GetVoltageRange>
 8001868:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800186a:	4b1e      	ldr	r3, [pc, #120]	; (80018e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800186c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186e:	4a1d      	ldr	r2, [pc, #116]	; (80018e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001874:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187c:	d10b      	bne.n	8001896 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b80      	cmp	r3, #128	; 0x80
 8001882:	d919      	bls.n	80018b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2ba0      	cmp	r3, #160	; 0xa0
 8001888:	d902      	bls.n	8001890 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800188a:	2302      	movs	r3, #2
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	e013      	b.n	80018b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001890:	2301      	movs	r3, #1
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	e010      	b.n	80018b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b80      	cmp	r3, #128	; 0x80
 800189a:	d902      	bls.n	80018a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800189c:	2303      	movs	r3, #3
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	e00a      	b.n	80018b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b80      	cmp	r3, #128	; 0x80
 80018a6:	d102      	bne.n	80018ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018a8:	2302      	movs	r3, #2
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	e004      	b.n	80018b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b70      	cmp	r3, #112	; 0x70
 80018b2:	d101      	bne.n	80018b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018b4:	2301      	movs	r3, #1
 80018b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f023 0207 	bic.w	r2, r3, #7
 80018c0:	4909      	ldr	r1, [pc, #36]	; (80018e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018c8:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d001      	beq.n	80018da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40022000 	.word	0x40022000

080018ec <__errno>:
 80018ec:	4b01      	ldr	r3, [pc, #4]	; (80018f4 <__errno+0x8>)
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000010 	.word	0x20000010

080018f8 <__libc_init_array>:
 80018f8:	b570      	push	{r4, r5, r6, lr}
 80018fa:	4d0d      	ldr	r5, [pc, #52]	; (8001930 <__libc_init_array+0x38>)
 80018fc:	4c0d      	ldr	r4, [pc, #52]	; (8001934 <__libc_init_array+0x3c>)
 80018fe:	1b64      	subs	r4, r4, r5
 8001900:	10a4      	asrs	r4, r4, #2
 8001902:	2600      	movs	r6, #0
 8001904:	42a6      	cmp	r6, r4
 8001906:	d109      	bne.n	800191c <__libc_init_array+0x24>
 8001908:	4d0b      	ldr	r5, [pc, #44]	; (8001938 <__libc_init_array+0x40>)
 800190a:	4c0c      	ldr	r4, [pc, #48]	; (800193c <__libc_init_array+0x44>)
 800190c:	f000 fc8e 	bl	800222c <_init>
 8001910:	1b64      	subs	r4, r4, r5
 8001912:	10a4      	asrs	r4, r4, #2
 8001914:	2600      	movs	r6, #0
 8001916:	42a6      	cmp	r6, r4
 8001918:	d105      	bne.n	8001926 <__libc_init_array+0x2e>
 800191a:	bd70      	pop	{r4, r5, r6, pc}
 800191c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001920:	4798      	blx	r3
 8001922:	3601      	adds	r6, #1
 8001924:	e7ee      	b.n	8001904 <__libc_init_array+0xc>
 8001926:	f855 3b04 	ldr.w	r3, [r5], #4
 800192a:	4798      	blx	r3
 800192c:	3601      	adds	r6, #1
 800192e:	e7f2      	b.n	8001916 <__libc_init_array+0x1e>
 8001930:	08002358 	.word	0x08002358
 8001934:	08002358 	.word	0x08002358
 8001938:	08002358 	.word	0x08002358
 800193c:	0800235c 	.word	0x0800235c

08001940 <memset>:
 8001940:	4402      	add	r2, r0
 8001942:	4603      	mov	r3, r0
 8001944:	4293      	cmp	r3, r2
 8001946:	d100      	bne.n	800194a <memset+0xa>
 8001948:	4770      	bx	lr
 800194a:	f803 1b01 	strb.w	r1, [r3], #1
 800194e:	e7f9      	b.n	8001944 <memset+0x4>

08001950 <siprintf>:
 8001950:	b40e      	push	{r1, r2, r3}
 8001952:	b500      	push	{lr}
 8001954:	b09c      	sub	sp, #112	; 0x70
 8001956:	ab1d      	add	r3, sp, #116	; 0x74
 8001958:	9002      	str	r0, [sp, #8]
 800195a:	9006      	str	r0, [sp, #24]
 800195c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001960:	4809      	ldr	r0, [pc, #36]	; (8001988 <siprintf+0x38>)
 8001962:	9107      	str	r1, [sp, #28]
 8001964:	9104      	str	r1, [sp, #16]
 8001966:	4909      	ldr	r1, [pc, #36]	; (800198c <siprintf+0x3c>)
 8001968:	f853 2b04 	ldr.w	r2, [r3], #4
 800196c:	9105      	str	r1, [sp, #20]
 800196e:	6800      	ldr	r0, [r0, #0]
 8001970:	9301      	str	r3, [sp, #4]
 8001972:	a902      	add	r1, sp, #8
 8001974:	f000 f868 	bl	8001a48 <_svfiprintf_r>
 8001978:	9b02      	ldr	r3, [sp, #8]
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
 800197e:	b01c      	add	sp, #112	; 0x70
 8001980:	f85d eb04 	ldr.w	lr, [sp], #4
 8001984:	b003      	add	sp, #12
 8001986:	4770      	bx	lr
 8001988:	20000010 	.word	0x20000010
 800198c:	ffff0208 	.word	0xffff0208

08001990 <__ssputs_r>:
 8001990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001994:	688e      	ldr	r6, [r1, #8]
 8001996:	429e      	cmp	r6, r3
 8001998:	4682      	mov	sl, r0
 800199a:	460c      	mov	r4, r1
 800199c:	4690      	mov	r8, r2
 800199e:	461f      	mov	r7, r3
 80019a0:	d838      	bhi.n	8001a14 <__ssputs_r+0x84>
 80019a2:	898a      	ldrh	r2, [r1, #12]
 80019a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80019a8:	d032      	beq.n	8001a10 <__ssputs_r+0x80>
 80019aa:	6825      	ldr	r5, [r4, #0]
 80019ac:	6909      	ldr	r1, [r1, #16]
 80019ae:	eba5 0901 	sub.w	r9, r5, r1
 80019b2:	6965      	ldr	r5, [r4, #20]
 80019b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80019b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80019bc:	3301      	adds	r3, #1
 80019be:	444b      	add	r3, r9
 80019c0:	106d      	asrs	r5, r5, #1
 80019c2:	429d      	cmp	r5, r3
 80019c4:	bf38      	it	cc
 80019c6:	461d      	movcc	r5, r3
 80019c8:	0553      	lsls	r3, r2, #21
 80019ca:	d531      	bpl.n	8001a30 <__ssputs_r+0xa0>
 80019cc:	4629      	mov	r1, r5
 80019ce:	f000 fb63 	bl	8002098 <_malloc_r>
 80019d2:	4606      	mov	r6, r0
 80019d4:	b950      	cbnz	r0, 80019ec <__ssputs_r+0x5c>
 80019d6:	230c      	movs	r3, #12
 80019d8:	f8ca 3000 	str.w	r3, [sl]
 80019dc:	89a3      	ldrh	r3, [r4, #12]
 80019de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019e2:	81a3      	strh	r3, [r4, #12]
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019ec:	6921      	ldr	r1, [r4, #16]
 80019ee:	464a      	mov	r2, r9
 80019f0:	f000 fabe 	bl	8001f70 <memcpy>
 80019f4:	89a3      	ldrh	r3, [r4, #12]
 80019f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80019fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019fe:	81a3      	strh	r3, [r4, #12]
 8001a00:	6126      	str	r6, [r4, #16]
 8001a02:	6165      	str	r5, [r4, #20]
 8001a04:	444e      	add	r6, r9
 8001a06:	eba5 0509 	sub.w	r5, r5, r9
 8001a0a:	6026      	str	r6, [r4, #0]
 8001a0c:	60a5      	str	r5, [r4, #8]
 8001a0e:	463e      	mov	r6, r7
 8001a10:	42be      	cmp	r6, r7
 8001a12:	d900      	bls.n	8001a16 <__ssputs_r+0x86>
 8001a14:	463e      	mov	r6, r7
 8001a16:	6820      	ldr	r0, [r4, #0]
 8001a18:	4632      	mov	r2, r6
 8001a1a:	4641      	mov	r1, r8
 8001a1c:	f000 fab6 	bl	8001f8c <memmove>
 8001a20:	68a3      	ldr	r3, [r4, #8]
 8001a22:	1b9b      	subs	r3, r3, r6
 8001a24:	60a3      	str	r3, [r4, #8]
 8001a26:	6823      	ldr	r3, [r4, #0]
 8001a28:	4433      	add	r3, r6
 8001a2a:	6023      	str	r3, [r4, #0]
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	e7db      	b.n	80019e8 <__ssputs_r+0x58>
 8001a30:	462a      	mov	r2, r5
 8001a32:	f000 fba5 	bl	8002180 <_realloc_r>
 8001a36:	4606      	mov	r6, r0
 8001a38:	2800      	cmp	r0, #0
 8001a3a:	d1e1      	bne.n	8001a00 <__ssputs_r+0x70>
 8001a3c:	6921      	ldr	r1, [r4, #16]
 8001a3e:	4650      	mov	r0, sl
 8001a40:	f000 fabe 	bl	8001fc0 <_free_r>
 8001a44:	e7c7      	b.n	80019d6 <__ssputs_r+0x46>
	...

08001a48 <_svfiprintf_r>:
 8001a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a4c:	4698      	mov	r8, r3
 8001a4e:	898b      	ldrh	r3, [r1, #12]
 8001a50:	061b      	lsls	r3, r3, #24
 8001a52:	b09d      	sub	sp, #116	; 0x74
 8001a54:	4607      	mov	r7, r0
 8001a56:	460d      	mov	r5, r1
 8001a58:	4614      	mov	r4, r2
 8001a5a:	d50e      	bpl.n	8001a7a <_svfiprintf_r+0x32>
 8001a5c:	690b      	ldr	r3, [r1, #16]
 8001a5e:	b963      	cbnz	r3, 8001a7a <_svfiprintf_r+0x32>
 8001a60:	2140      	movs	r1, #64	; 0x40
 8001a62:	f000 fb19 	bl	8002098 <_malloc_r>
 8001a66:	6028      	str	r0, [r5, #0]
 8001a68:	6128      	str	r0, [r5, #16]
 8001a6a:	b920      	cbnz	r0, 8001a76 <_svfiprintf_r+0x2e>
 8001a6c:	230c      	movs	r3, #12
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	e0d1      	b.n	8001c1a <_svfiprintf_r+0x1d2>
 8001a76:	2340      	movs	r3, #64	; 0x40
 8001a78:	616b      	str	r3, [r5, #20]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8001a7e:	2320      	movs	r3, #32
 8001a80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001a84:	f8cd 800c 	str.w	r8, [sp, #12]
 8001a88:	2330      	movs	r3, #48	; 0x30
 8001a8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001c34 <_svfiprintf_r+0x1ec>
 8001a8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001a92:	f04f 0901 	mov.w	r9, #1
 8001a96:	4623      	mov	r3, r4
 8001a98:	469a      	mov	sl, r3
 8001a9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001a9e:	b10a      	cbz	r2, 8001aa4 <_svfiprintf_r+0x5c>
 8001aa0:	2a25      	cmp	r2, #37	; 0x25
 8001aa2:	d1f9      	bne.n	8001a98 <_svfiprintf_r+0x50>
 8001aa4:	ebba 0b04 	subs.w	fp, sl, r4
 8001aa8:	d00b      	beq.n	8001ac2 <_svfiprintf_r+0x7a>
 8001aaa:	465b      	mov	r3, fp
 8001aac:	4622      	mov	r2, r4
 8001aae:	4629      	mov	r1, r5
 8001ab0:	4638      	mov	r0, r7
 8001ab2:	f7ff ff6d 	bl	8001990 <__ssputs_r>
 8001ab6:	3001      	adds	r0, #1
 8001ab8:	f000 80aa 	beq.w	8001c10 <_svfiprintf_r+0x1c8>
 8001abc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001abe:	445a      	add	r2, fp
 8001ac0:	9209      	str	r2, [sp, #36]	; 0x24
 8001ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 80a2 	beq.w	8001c10 <_svfiprintf_r+0x1c8>
 8001acc:	2300      	movs	r3, #0
 8001ace:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001ad6:	f10a 0a01 	add.w	sl, sl, #1
 8001ada:	9304      	str	r3, [sp, #16]
 8001adc:	9307      	str	r3, [sp, #28]
 8001ade:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001ae2:	931a      	str	r3, [sp, #104]	; 0x68
 8001ae4:	4654      	mov	r4, sl
 8001ae6:	2205      	movs	r2, #5
 8001ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001aec:	4851      	ldr	r0, [pc, #324]	; (8001c34 <_svfiprintf_r+0x1ec>)
 8001aee:	f7fe fb7f 	bl	80001f0 <memchr>
 8001af2:	9a04      	ldr	r2, [sp, #16]
 8001af4:	b9d8      	cbnz	r0, 8001b2e <_svfiprintf_r+0xe6>
 8001af6:	06d0      	lsls	r0, r2, #27
 8001af8:	bf44      	itt	mi
 8001afa:	2320      	movmi	r3, #32
 8001afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001b00:	0711      	lsls	r1, r2, #28
 8001b02:	bf44      	itt	mi
 8001b04:	232b      	movmi	r3, #43	; 0x2b
 8001b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8001b0e:	2b2a      	cmp	r3, #42	; 0x2a
 8001b10:	d015      	beq.n	8001b3e <_svfiprintf_r+0xf6>
 8001b12:	9a07      	ldr	r2, [sp, #28]
 8001b14:	4654      	mov	r4, sl
 8001b16:	2000      	movs	r0, #0
 8001b18:	f04f 0c0a 	mov.w	ip, #10
 8001b1c:	4621      	mov	r1, r4
 8001b1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001b22:	3b30      	subs	r3, #48	; 0x30
 8001b24:	2b09      	cmp	r3, #9
 8001b26:	d94e      	bls.n	8001bc6 <_svfiprintf_r+0x17e>
 8001b28:	b1b0      	cbz	r0, 8001b58 <_svfiprintf_r+0x110>
 8001b2a:	9207      	str	r2, [sp, #28]
 8001b2c:	e014      	b.n	8001b58 <_svfiprintf_r+0x110>
 8001b2e:	eba0 0308 	sub.w	r3, r0, r8
 8001b32:	fa09 f303 	lsl.w	r3, r9, r3
 8001b36:	4313      	orrs	r3, r2
 8001b38:	9304      	str	r3, [sp, #16]
 8001b3a:	46a2      	mov	sl, r4
 8001b3c:	e7d2      	b.n	8001ae4 <_svfiprintf_r+0x9c>
 8001b3e:	9b03      	ldr	r3, [sp, #12]
 8001b40:	1d19      	adds	r1, r3, #4
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	9103      	str	r1, [sp, #12]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	bfbb      	ittet	lt
 8001b4a:	425b      	neglt	r3, r3
 8001b4c:	f042 0202 	orrlt.w	r2, r2, #2
 8001b50:	9307      	strge	r3, [sp, #28]
 8001b52:	9307      	strlt	r3, [sp, #28]
 8001b54:	bfb8      	it	lt
 8001b56:	9204      	strlt	r2, [sp, #16]
 8001b58:	7823      	ldrb	r3, [r4, #0]
 8001b5a:	2b2e      	cmp	r3, #46	; 0x2e
 8001b5c:	d10c      	bne.n	8001b78 <_svfiprintf_r+0x130>
 8001b5e:	7863      	ldrb	r3, [r4, #1]
 8001b60:	2b2a      	cmp	r3, #42	; 0x2a
 8001b62:	d135      	bne.n	8001bd0 <_svfiprintf_r+0x188>
 8001b64:	9b03      	ldr	r3, [sp, #12]
 8001b66:	1d1a      	adds	r2, r3, #4
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	9203      	str	r2, [sp, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	bfb8      	it	lt
 8001b70:	f04f 33ff 	movlt.w	r3, #4294967295
 8001b74:	3402      	adds	r4, #2
 8001b76:	9305      	str	r3, [sp, #20]
 8001b78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001c44 <_svfiprintf_r+0x1fc>
 8001b7c:	7821      	ldrb	r1, [r4, #0]
 8001b7e:	2203      	movs	r2, #3
 8001b80:	4650      	mov	r0, sl
 8001b82:	f7fe fb35 	bl	80001f0 <memchr>
 8001b86:	b140      	cbz	r0, 8001b9a <_svfiprintf_r+0x152>
 8001b88:	2340      	movs	r3, #64	; 0x40
 8001b8a:	eba0 000a 	sub.w	r0, r0, sl
 8001b8e:	fa03 f000 	lsl.w	r0, r3, r0
 8001b92:	9b04      	ldr	r3, [sp, #16]
 8001b94:	4303      	orrs	r3, r0
 8001b96:	3401      	adds	r4, #1
 8001b98:	9304      	str	r3, [sp, #16]
 8001b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b9e:	4826      	ldr	r0, [pc, #152]	; (8001c38 <_svfiprintf_r+0x1f0>)
 8001ba0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001ba4:	2206      	movs	r2, #6
 8001ba6:	f7fe fb23 	bl	80001f0 <memchr>
 8001baa:	2800      	cmp	r0, #0
 8001bac:	d038      	beq.n	8001c20 <_svfiprintf_r+0x1d8>
 8001bae:	4b23      	ldr	r3, [pc, #140]	; (8001c3c <_svfiprintf_r+0x1f4>)
 8001bb0:	bb1b      	cbnz	r3, 8001bfa <_svfiprintf_r+0x1b2>
 8001bb2:	9b03      	ldr	r3, [sp, #12]
 8001bb4:	3307      	adds	r3, #7
 8001bb6:	f023 0307 	bic.w	r3, r3, #7
 8001bba:	3308      	adds	r3, #8
 8001bbc:	9303      	str	r3, [sp, #12]
 8001bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001bc0:	4433      	add	r3, r6
 8001bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8001bc4:	e767      	b.n	8001a96 <_svfiprintf_r+0x4e>
 8001bc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8001bca:	460c      	mov	r4, r1
 8001bcc:	2001      	movs	r0, #1
 8001bce:	e7a5      	b.n	8001b1c <_svfiprintf_r+0xd4>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	3401      	adds	r4, #1
 8001bd4:	9305      	str	r3, [sp, #20]
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f04f 0c0a 	mov.w	ip, #10
 8001bdc:	4620      	mov	r0, r4
 8001bde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001be2:	3a30      	subs	r2, #48	; 0x30
 8001be4:	2a09      	cmp	r2, #9
 8001be6:	d903      	bls.n	8001bf0 <_svfiprintf_r+0x1a8>
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0c5      	beq.n	8001b78 <_svfiprintf_r+0x130>
 8001bec:	9105      	str	r1, [sp, #20]
 8001bee:	e7c3      	b.n	8001b78 <_svfiprintf_r+0x130>
 8001bf0:	fb0c 2101 	mla	r1, ip, r1, r2
 8001bf4:	4604      	mov	r4, r0
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e7f0      	b.n	8001bdc <_svfiprintf_r+0x194>
 8001bfa:	ab03      	add	r3, sp, #12
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	462a      	mov	r2, r5
 8001c00:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <_svfiprintf_r+0x1f8>)
 8001c02:	a904      	add	r1, sp, #16
 8001c04:	4638      	mov	r0, r7
 8001c06:	f3af 8000 	nop.w
 8001c0a:	1c42      	adds	r2, r0, #1
 8001c0c:	4606      	mov	r6, r0
 8001c0e:	d1d6      	bne.n	8001bbe <_svfiprintf_r+0x176>
 8001c10:	89ab      	ldrh	r3, [r5, #12]
 8001c12:	065b      	lsls	r3, r3, #25
 8001c14:	f53f af2c 	bmi.w	8001a70 <_svfiprintf_r+0x28>
 8001c18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001c1a:	b01d      	add	sp, #116	; 0x74
 8001c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c20:	ab03      	add	r3, sp, #12
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	462a      	mov	r2, r5
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <_svfiprintf_r+0x1f8>)
 8001c28:	a904      	add	r1, sp, #16
 8001c2a:	4638      	mov	r0, r7
 8001c2c:	f000 f87a 	bl	8001d24 <_printf_i>
 8001c30:	e7eb      	b.n	8001c0a <_svfiprintf_r+0x1c2>
 8001c32:	bf00      	nop
 8001c34:	08002324 	.word	0x08002324
 8001c38:	0800232e 	.word	0x0800232e
 8001c3c:	00000000 	.word	0x00000000
 8001c40:	08001991 	.word	0x08001991
 8001c44:	0800232a 	.word	0x0800232a

08001c48 <_printf_common>:
 8001c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c4c:	4616      	mov	r6, r2
 8001c4e:	4699      	mov	r9, r3
 8001c50:	688a      	ldr	r2, [r1, #8]
 8001c52:	690b      	ldr	r3, [r1, #16]
 8001c54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	bfb8      	it	lt
 8001c5c:	4613      	movlt	r3, r2
 8001c5e:	6033      	str	r3, [r6, #0]
 8001c60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001c64:	4607      	mov	r7, r0
 8001c66:	460c      	mov	r4, r1
 8001c68:	b10a      	cbz	r2, 8001c6e <_printf_common+0x26>
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	6033      	str	r3, [r6, #0]
 8001c6e:	6823      	ldr	r3, [r4, #0]
 8001c70:	0699      	lsls	r1, r3, #26
 8001c72:	bf42      	ittt	mi
 8001c74:	6833      	ldrmi	r3, [r6, #0]
 8001c76:	3302      	addmi	r3, #2
 8001c78:	6033      	strmi	r3, [r6, #0]
 8001c7a:	6825      	ldr	r5, [r4, #0]
 8001c7c:	f015 0506 	ands.w	r5, r5, #6
 8001c80:	d106      	bne.n	8001c90 <_printf_common+0x48>
 8001c82:	f104 0a19 	add.w	sl, r4, #25
 8001c86:	68e3      	ldr	r3, [r4, #12]
 8001c88:	6832      	ldr	r2, [r6, #0]
 8001c8a:	1a9b      	subs	r3, r3, r2
 8001c8c:	42ab      	cmp	r3, r5
 8001c8e:	dc26      	bgt.n	8001cde <_printf_common+0x96>
 8001c90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001c94:	1e13      	subs	r3, r2, #0
 8001c96:	6822      	ldr	r2, [r4, #0]
 8001c98:	bf18      	it	ne
 8001c9a:	2301      	movne	r3, #1
 8001c9c:	0692      	lsls	r2, r2, #26
 8001c9e:	d42b      	bmi.n	8001cf8 <_printf_common+0xb0>
 8001ca0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ca4:	4649      	mov	r1, r9
 8001ca6:	4638      	mov	r0, r7
 8001ca8:	47c0      	blx	r8
 8001caa:	3001      	adds	r0, #1
 8001cac:	d01e      	beq.n	8001cec <_printf_common+0xa4>
 8001cae:	6823      	ldr	r3, [r4, #0]
 8001cb0:	68e5      	ldr	r5, [r4, #12]
 8001cb2:	6832      	ldr	r2, [r6, #0]
 8001cb4:	f003 0306 	and.w	r3, r3, #6
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	bf08      	it	eq
 8001cbc:	1aad      	subeq	r5, r5, r2
 8001cbe:	68a3      	ldr	r3, [r4, #8]
 8001cc0:	6922      	ldr	r2, [r4, #16]
 8001cc2:	bf0c      	ite	eq
 8001cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001cc8:	2500      	movne	r5, #0
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	bfc4      	itt	gt
 8001cce:	1a9b      	subgt	r3, r3, r2
 8001cd0:	18ed      	addgt	r5, r5, r3
 8001cd2:	2600      	movs	r6, #0
 8001cd4:	341a      	adds	r4, #26
 8001cd6:	42b5      	cmp	r5, r6
 8001cd8:	d11a      	bne.n	8001d10 <_printf_common+0xc8>
 8001cda:	2000      	movs	r0, #0
 8001cdc:	e008      	b.n	8001cf0 <_printf_common+0xa8>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	4652      	mov	r2, sl
 8001ce2:	4649      	mov	r1, r9
 8001ce4:	4638      	mov	r0, r7
 8001ce6:	47c0      	blx	r8
 8001ce8:	3001      	adds	r0, #1
 8001cea:	d103      	bne.n	8001cf4 <_printf_common+0xac>
 8001cec:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cf4:	3501      	adds	r5, #1
 8001cf6:	e7c6      	b.n	8001c86 <_printf_common+0x3e>
 8001cf8:	18e1      	adds	r1, r4, r3
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	2030      	movs	r0, #48	; 0x30
 8001cfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001d02:	4422      	add	r2, r4
 8001d04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001d08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	e7c7      	b.n	8001ca0 <_printf_common+0x58>
 8001d10:	2301      	movs	r3, #1
 8001d12:	4622      	mov	r2, r4
 8001d14:	4649      	mov	r1, r9
 8001d16:	4638      	mov	r0, r7
 8001d18:	47c0      	blx	r8
 8001d1a:	3001      	adds	r0, #1
 8001d1c:	d0e6      	beq.n	8001cec <_printf_common+0xa4>
 8001d1e:	3601      	adds	r6, #1
 8001d20:	e7d9      	b.n	8001cd6 <_printf_common+0x8e>
	...

08001d24 <_printf_i>:
 8001d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d28:	7e0f      	ldrb	r7, [r1, #24]
 8001d2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001d2c:	2f78      	cmp	r7, #120	; 0x78
 8001d2e:	4691      	mov	r9, r2
 8001d30:	4680      	mov	r8, r0
 8001d32:	460c      	mov	r4, r1
 8001d34:	469a      	mov	sl, r3
 8001d36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001d3a:	d807      	bhi.n	8001d4c <_printf_i+0x28>
 8001d3c:	2f62      	cmp	r7, #98	; 0x62
 8001d3e:	d80a      	bhi.n	8001d56 <_printf_i+0x32>
 8001d40:	2f00      	cmp	r7, #0
 8001d42:	f000 80d8 	beq.w	8001ef6 <_printf_i+0x1d2>
 8001d46:	2f58      	cmp	r7, #88	; 0x58
 8001d48:	f000 80a3 	beq.w	8001e92 <_printf_i+0x16e>
 8001d4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001d54:	e03a      	b.n	8001dcc <_printf_i+0xa8>
 8001d56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001d5a:	2b15      	cmp	r3, #21
 8001d5c:	d8f6      	bhi.n	8001d4c <_printf_i+0x28>
 8001d5e:	a101      	add	r1, pc, #4	; (adr r1, 8001d64 <_printf_i+0x40>)
 8001d60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001d64:	08001dbd 	.word	0x08001dbd
 8001d68:	08001dd1 	.word	0x08001dd1
 8001d6c:	08001d4d 	.word	0x08001d4d
 8001d70:	08001d4d 	.word	0x08001d4d
 8001d74:	08001d4d 	.word	0x08001d4d
 8001d78:	08001d4d 	.word	0x08001d4d
 8001d7c:	08001dd1 	.word	0x08001dd1
 8001d80:	08001d4d 	.word	0x08001d4d
 8001d84:	08001d4d 	.word	0x08001d4d
 8001d88:	08001d4d 	.word	0x08001d4d
 8001d8c:	08001d4d 	.word	0x08001d4d
 8001d90:	08001edd 	.word	0x08001edd
 8001d94:	08001e01 	.word	0x08001e01
 8001d98:	08001ebf 	.word	0x08001ebf
 8001d9c:	08001d4d 	.word	0x08001d4d
 8001da0:	08001d4d 	.word	0x08001d4d
 8001da4:	08001eff 	.word	0x08001eff
 8001da8:	08001d4d 	.word	0x08001d4d
 8001dac:	08001e01 	.word	0x08001e01
 8001db0:	08001d4d 	.word	0x08001d4d
 8001db4:	08001d4d 	.word	0x08001d4d
 8001db8:	08001ec7 	.word	0x08001ec7
 8001dbc:	682b      	ldr	r3, [r5, #0]
 8001dbe:	1d1a      	adds	r2, r3, #4
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	602a      	str	r2, [r5, #0]
 8001dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001dc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e0a3      	b.n	8001f18 <_printf_i+0x1f4>
 8001dd0:	6820      	ldr	r0, [r4, #0]
 8001dd2:	6829      	ldr	r1, [r5, #0]
 8001dd4:	0606      	lsls	r6, r0, #24
 8001dd6:	f101 0304 	add.w	r3, r1, #4
 8001dda:	d50a      	bpl.n	8001df2 <_printf_i+0xce>
 8001ddc:	680e      	ldr	r6, [r1, #0]
 8001dde:	602b      	str	r3, [r5, #0]
 8001de0:	2e00      	cmp	r6, #0
 8001de2:	da03      	bge.n	8001dec <_printf_i+0xc8>
 8001de4:	232d      	movs	r3, #45	; 0x2d
 8001de6:	4276      	negs	r6, r6
 8001de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001dec:	485e      	ldr	r0, [pc, #376]	; (8001f68 <_printf_i+0x244>)
 8001dee:	230a      	movs	r3, #10
 8001df0:	e019      	b.n	8001e26 <_printf_i+0x102>
 8001df2:	680e      	ldr	r6, [r1, #0]
 8001df4:	602b      	str	r3, [r5, #0]
 8001df6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001dfa:	bf18      	it	ne
 8001dfc:	b236      	sxthne	r6, r6
 8001dfe:	e7ef      	b.n	8001de0 <_printf_i+0xbc>
 8001e00:	682b      	ldr	r3, [r5, #0]
 8001e02:	6820      	ldr	r0, [r4, #0]
 8001e04:	1d19      	adds	r1, r3, #4
 8001e06:	6029      	str	r1, [r5, #0]
 8001e08:	0601      	lsls	r1, r0, #24
 8001e0a:	d501      	bpl.n	8001e10 <_printf_i+0xec>
 8001e0c:	681e      	ldr	r6, [r3, #0]
 8001e0e:	e002      	b.n	8001e16 <_printf_i+0xf2>
 8001e10:	0646      	lsls	r6, r0, #25
 8001e12:	d5fb      	bpl.n	8001e0c <_printf_i+0xe8>
 8001e14:	881e      	ldrh	r6, [r3, #0]
 8001e16:	4854      	ldr	r0, [pc, #336]	; (8001f68 <_printf_i+0x244>)
 8001e18:	2f6f      	cmp	r7, #111	; 0x6f
 8001e1a:	bf0c      	ite	eq
 8001e1c:	2308      	moveq	r3, #8
 8001e1e:	230a      	movne	r3, #10
 8001e20:	2100      	movs	r1, #0
 8001e22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001e26:	6865      	ldr	r5, [r4, #4]
 8001e28:	60a5      	str	r5, [r4, #8]
 8001e2a:	2d00      	cmp	r5, #0
 8001e2c:	bfa2      	ittt	ge
 8001e2e:	6821      	ldrge	r1, [r4, #0]
 8001e30:	f021 0104 	bicge.w	r1, r1, #4
 8001e34:	6021      	strge	r1, [r4, #0]
 8001e36:	b90e      	cbnz	r6, 8001e3c <_printf_i+0x118>
 8001e38:	2d00      	cmp	r5, #0
 8001e3a:	d04d      	beq.n	8001ed8 <_printf_i+0x1b4>
 8001e3c:	4615      	mov	r5, r2
 8001e3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8001e42:	fb03 6711 	mls	r7, r3, r1, r6
 8001e46:	5dc7      	ldrb	r7, [r0, r7]
 8001e48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001e4c:	4637      	mov	r7, r6
 8001e4e:	42bb      	cmp	r3, r7
 8001e50:	460e      	mov	r6, r1
 8001e52:	d9f4      	bls.n	8001e3e <_printf_i+0x11a>
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d10b      	bne.n	8001e70 <_printf_i+0x14c>
 8001e58:	6823      	ldr	r3, [r4, #0]
 8001e5a:	07de      	lsls	r6, r3, #31
 8001e5c:	d508      	bpl.n	8001e70 <_printf_i+0x14c>
 8001e5e:	6923      	ldr	r3, [r4, #16]
 8001e60:	6861      	ldr	r1, [r4, #4]
 8001e62:	4299      	cmp	r1, r3
 8001e64:	bfde      	ittt	le
 8001e66:	2330      	movle	r3, #48	; 0x30
 8001e68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001e6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001e70:	1b52      	subs	r2, r2, r5
 8001e72:	6122      	str	r2, [r4, #16]
 8001e74:	f8cd a000 	str.w	sl, [sp]
 8001e78:	464b      	mov	r3, r9
 8001e7a:	aa03      	add	r2, sp, #12
 8001e7c:	4621      	mov	r1, r4
 8001e7e:	4640      	mov	r0, r8
 8001e80:	f7ff fee2 	bl	8001c48 <_printf_common>
 8001e84:	3001      	adds	r0, #1
 8001e86:	d14c      	bne.n	8001f22 <_printf_i+0x1fe>
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8c:	b004      	add	sp, #16
 8001e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e92:	4835      	ldr	r0, [pc, #212]	; (8001f68 <_printf_i+0x244>)
 8001e94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001e98:	6829      	ldr	r1, [r5, #0]
 8001e9a:	6823      	ldr	r3, [r4, #0]
 8001e9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8001ea0:	6029      	str	r1, [r5, #0]
 8001ea2:	061d      	lsls	r5, r3, #24
 8001ea4:	d514      	bpl.n	8001ed0 <_printf_i+0x1ac>
 8001ea6:	07df      	lsls	r7, r3, #31
 8001ea8:	bf44      	itt	mi
 8001eaa:	f043 0320 	orrmi.w	r3, r3, #32
 8001eae:	6023      	strmi	r3, [r4, #0]
 8001eb0:	b91e      	cbnz	r6, 8001eba <_printf_i+0x196>
 8001eb2:	6823      	ldr	r3, [r4, #0]
 8001eb4:	f023 0320 	bic.w	r3, r3, #32
 8001eb8:	6023      	str	r3, [r4, #0]
 8001eba:	2310      	movs	r3, #16
 8001ebc:	e7b0      	b.n	8001e20 <_printf_i+0xfc>
 8001ebe:	6823      	ldr	r3, [r4, #0]
 8001ec0:	f043 0320 	orr.w	r3, r3, #32
 8001ec4:	6023      	str	r3, [r4, #0]
 8001ec6:	2378      	movs	r3, #120	; 0x78
 8001ec8:	4828      	ldr	r0, [pc, #160]	; (8001f6c <_printf_i+0x248>)
 8001eca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001ece:	e7e3      	b.n	8001e98 <_printf_i+0x174>
 8001ed0:	0659      	lsls	r1, r3, #25
 8001ed2:	bf48      	it	mi
 8001ed4:	b2b6      	uxthmi	r6, r6
 8001ed6:	e7e6      	b.n	8001ea6 <_printf_i+0x182>
 8001ed8:	4615      	mov	r5, r2
 8001eda:	e7bb      	b.n	8001e54 <_printf_i+0x130>
 8001edc:	682b      	ldr	r3, [r5, #0]
 8001ede:	6826      	ldr	r6, [r4, #0]
 8001ee0:	6961      	ldr	r1, [r4, #20]
 8001ee2:	1d18      	adds	r0, r3, #4
 8001ee4:	6028      	str	r0, [r5, #0]
 8001ee6:	0635      	lsls	r5, r6, #24
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	d501      	bpl.n	8001ef0 <_printf_i+0x1cc>
 8001eec:	6019      	str	r1, [r3, #0]
 8001eee:	e002      	b.n	8001ef6 <_printf_i+0x1d2>
 8001ef0:	0670      	lsls	r0, r6, #25
 8001ef2:	d5fb      	bpl.n	8001eec <_printf_i+0x1c8>
 8001ef4:	8019      	strh	r1, [r3, #0]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	6123      	str	r3, [r4, #16]
 8001efa:	4615      	mov	r5, r2
 8001efc:	e7ba      	b.n	8001e74 <_printf_i+0x150>
 8001efe:	682b      	ldr	r3, [r5, #0]
 8001f00:	1d1a      	adds	r2, r3, #4
 8001f02:	602a      	str	r2, [r5, #0]
 8001f04:	681d      	ldr	r5, [r3, #0]
 8001f06:	6862      	ldr	r2, [r4, #4]
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4628      	mov	r0, r5
 8001f0c:	f7fe f970 	bl	80001f0 <memchr>
 8001f10:	b108      	cbz	r0, 8001f16 <_printf_i+0x1f2>
 8001f12:	1b40      	subs	r0, r0, r5
 8001f14:	6060      	str	r0, [r4, #4]
 8001f16:	6863      	ldr	r3, [r4, #4]
 8001f18:	6123      	str	r3, [r4, #16]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f20:	e7a8      	b.n	8001e74 <_printf_i+0x150>
 8001f22:	6923      	ldr	r3, [r4, #16]
 8001f24:	462a      	mov	r2, r5
 8001f26:	4649      	mov	r1, r9
 8001f28:	4640      	mov	r0, r8
 8001f2a:	47d0      	blx	sl
 8001f2c:	3001      	adds	r0, #1
 8001f2e:	d0ab      	beq.n	8001e88 <_printf_i+0x164>
 8001f30:	6823      	ldr	r3, [r4, #0]
 8001f32:	079b      	lsls	r3, r3, #30
 8001f34:	d413      	bmi.n	8001f5e <_printf_i+0x23a>
 8001f36:	68e0      	ldr	r0, [r4, #12]
 8001f38:	9b03      	ldr	r3, [sp, #12]
 8001f3a:	4298      	cmp	r0, r3
 8001f3c:	bfb8      	it	lt
 8001f3e:	4618      	movlt	r0, r3
 8001f40:	e7a4      	b.n	8001e8c <_printf_i+0x168>
 8001f42:	2301      	movs	r3, #1
 8001f44:	4632      	mov	r2, r6
 8001f46:	4649      	mov	r1, r9
 8001f48:	4640      	mov	r0, r8
 8001f4a:	47d0      	blx	sl
 8001f4c:	3001      	adds	r0, #1
 8001f4e:	d09b      	beq.n	8001e88 <_printf_i+0x164>
 8001f50:	3501      	adds	r5, #1
 8001f52:	68e3      	ldr	r3, [r4, #12]
 8001f54:	9903      	ldr	r1, [sp, #12]
 8001f56:	1a5b      	subs	r3, r3, r1
 8001f58:	42ab      	cmp	r3, r5
 8001f5a:	dcf2      	bgt.n	8001f42 <_printf_i+0x21e>
 8001f5c:	e7eb      	b.n	8001f36 <_printf_i+0x212>
 8001f5e:	2500      	movs	r5, #0
 8001f60:	f104 0619 	add.w	r6, r4, #25
 8001f64:	e7f5      	b.n	8001f52 <_printf_i+0x22e>
 8001f66:	bf00      	nop
 8001f68:	08002335 	.word	0x08002335
 8001f6c:	08002346 	.word	0x08002346

08001f70 <memcpy>:
 8001f70:	440a      	add	r2, r1
 8001f72:	4291      	cmp	r1, r2
 8001f74:	f100 33ff 	add.w	r3, r0, #4294967295
 8001f78:	d100      	bne.n	8001f7c <memcpy+0xc>
 8001f7a:	4770      	bx	lr
 8001f7c:	b510      	push	{r4, lr}
 8001f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001f82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001f86:	4291      	cmp	r1, r2
 8001f88:	d1f9      	bne.n	8001f7e <memcpy+0xe>
 8001f8a:	bd10      	pop	{r4, pc}

08001f8c <memmove>:
 8001f8c:	4288      	cmp	r0, r1
 8001f8e:	b510      	push	{r4, lr}
 8001f90:	eb01 0402 	add.w	r4, r1, r2
 8001f94:	d902      	bls.n	8001f9c <memmove+0x10>
 8001f96:	4284      	cmp	r4, r0
 8001f98:	4623      	mov	r3, r4
 8001f9a:	d807      	bhi.n	8001fac <memmove+0x20>
 8001f9c:	1e43      	subs	r3, r0, #1
 8001f9e:	42a1      	cmp	r1, r4
 8001fa0:	d008      	beq.n	8001fb4 <memmove+0x28>
 8001fa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001fa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001faa:	e7f8      	b.n	8001f9e <memmove+0x12>
 8001fac:	4402      	add	r2, r0
 8001fae:	4601      	mov	r1, r0
 8001fb0:	428a      	cmp	r2, r1
 8001fb2:	d100      	bne.n	8001fb6 <memmove+0x2a>
 8001fb4:	bd10      	pop	{r4, pc}
 8001fb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001fba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001fbe:	e7f7      	b.n	8001fb0 <memmove+0x24>

08001fc0 <_free_r>:
 8001fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001fc2:	2900      	cmp	r1, #0
 8001fc4:	d044      	beq.n	8002050 <_free_r+0x90>
 8001fc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001fca:	9001      	str	r0, [sp, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f1a1 0404 	sub.w	r4, r1, #4
 8001fd2:	bfb8      	it	lt
 8001fd4:	18e4      	addlt	r4, r4, r3
 8001fd6:	f000 f913 	bl	8002200 <__malloc_lock>
 8001fda:	4a1e      	ldr	r2, [pc, #120]	; (8002054 <_free_r+0x94>)
 8001fdc:	9801      	ldr	r0, [sp, #4]
 8001fde:	6813      	ldr	r3, [r2, #0]
 8001fe0:	b933      	cbnz	r3, 8001ff0 <_free_r+0x30>
 8001fe2:	6063      	str	r3, [r4, #4]
 8001fe4:	6014      	str	r4, [r2, #0]
 8001fe6:	b003      	add	sp, #12
 8001fe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001fec:	f000 b90e 	b.w	800220c <__malloc_unlock>
 8001ff0:	42a3      	cmp	r3, r4
 8001ff2:	d908      	bls.n	8002006 <_free_r+0x46>
 8001ff4:	6825      	ldr	r5, [r4, #0]
 8001ff6:	1961      	adds	r1, r4, r5
 8001ff8:	428b      	cmp	r3, r1
 8001ffa:	bf01      	itttt	eq
 8001ffc:	6819      	ldreq	r1, [r3, #0]
 8001ffe:	685b      	ldreq	r3, [r3, #4]
 8002000:	1949      	addeq	r1, r1, r5
 8002002:	6021      	streq	r1, [r4, #0]
 8002004:	e7ed      	b.n	8001fe2 <_free_r+0x22>
 8002006:	461a      	mov	r2, r3
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	b10b      	cbz	r3, 8002010 <_free_r+0x50>
 800200c:	42a3      	cmp	r3, r4
 800200e:	d9fa      	bls.n	8002006 <_free_r+0x46>
 8002010:	6811      	ldr	r1, [r2, #0]
 8002012:	1855      	adds	r5, r2, r1
 8002014:	42a5      	cmp	r5, r4
 8002016:	d10b      	bne.n	8002030 <_free_r+0x70>
 8002018:	6824      	ldr	r4, [r4, #0]
 800201a:	4421      	add	r1, r4
 800201c:	1854      	adds	r4, r2, r1
 800201e:	42a3      	cmp	r3, r4
 8002020:	6011      	str	r1, [r2, #0]
 8002022:	d1e0      	bne.n	8001fe6 <_free_r+0x26>
 8002024:	681c      	ldr	r4, [r3, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	6053      	str	r3, [r2, #4]
 800202a:	4421      	add	r1, r4
 800202c:	6011      	str	r1, [r2, #0]
 800202e:	e7da      	b.n	8001fe6 <_free_r+0x26>
 8002030:	d902      	bls.n	8002038 <_free_r+0x78>
 8002032:	230c      	movs	r3, #12
 8002034:	6003      	str	r3, [r0, #0]
 8002036:	e7d6      	b.n	8001fe6 <_free_r+0x26>
 8002038:	6825      	ldr	r5, [r4, #0]
 800203a:	1961      	adds	r1, r4, r5
 800203c:	428b      	cmp	r3, r1
 800203e:	bf04      	itt	eq
 8002040:	6819      	ldreq	r1, [r3, #0]
 8002042:	685b      	ldreq	r3, [r3, #4]
 8002044:	6063      	str	r3, [r4, #4]
 8002046:	bf04      	itt	eq
 8002048:	1949      	addeq	r1, r1, r5
 800204a:	6021      	streq	r1, [r4, #0]
 800204c:	6054      	str	r4, [r2, #4]
 800204e:	e7ca      	b.n	8001fe6 <_free_r+0x26>
 8002050:	b003      	add	sp, #12
 8002052:	bd30      	pop	{r4, r5, pc}
 8002054:	2000009c 	.word	0x2000009c

08002058 <sbrk_aligned>:
 8002058:	b570      	push	{r4, r5, r6, lr}
 800205a:	4e0e      	ldr	r6, [pc, #56]	; (8002094 <sbrk_aligned+0x3c>)
 800205c:	460c      	mov	r4, r1
 800205e:	6831      	ldr	r1, [r6, #0]
 8002060:	4605      	mov	r5, r0
 8002062:	b911      	cbnz	r1, 800206a <sbrk_aligned+0x12>
 8002064:	f000 f8bc 	bl	80021e0 <_sbrk_r>
 8002068:	6030      	str	r0, [r6, #0]
 800206a:	4621      	mov	r1, r4
 800206c:	4628      	mov	r0, r5
 800206e:	f000 f8b7 	bl	80021e0 <_sbrk_r>
 8002072:	1c43      	adds	r3, r0, #1
 8002074:	d00a      	beq.n	800208c <sbrk_aligned+0x34>
 8002076:	1cc4      	adds	r4, r0, #3
 8002078:	f024 0403 	bic.w	r4, r4, #3
 800207c:	42a0      	cmp	r0, r4
 800207e:	d007      	beq.n	8002090 <sbrk_aligned+0x38>
 8002080:	1a21      	subs	r1, r4, r0
 8002082:	4628      	mov	r0, r5
 8002084:	f000 f8ac 	bl	80021e0 <_sbrk_r>
 8002088:	3001      	adds	r0, #1
 800208a:	d101      	bne.n	8002090 <sbrk_aligned+0x38>
 800208c:	f04f 34ff 	mov.w	r4, #4294967295
 8002090:	4620      	mov	r0, r4
 8002092:	bd70      	pop	{r4, r5, r6, pc}
 8002094:	200000a0 	.word	0x200000a0

08002098 <_malloc_r>:
 8002098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800209c:	1ccd      	adds	r5, r1, #3
 800209e:	f025 0503 	bic.w	r5, r5, #3
 80020a2:	3508      	adds	r5, #8
 80020a4:	2d0c      	cmp	r5, #12
 80020a6:	bf38      	it	cc
 80020a8:	250c      	movcc	r5, #12
 80020aa:	2d00      	cmp	r5, #0
 80020ac:	4607      	mov	r7, r0
 80020ae:	db01      	blt.n	80020b4 <_malloc_r+0x1c>
 80020b0:	42a9      	cmp	r1, r5
 80020b2:	d905      	bls.n	80020c0 <_malloc_r+0x28>
 80020b4:	230c      	movs	r3, #12
 80020b6:	603b      	str	r3, [r7, #0]
 80020b8:	2600      	movs	r6, #0
 80020ba:	4630      	mov	r0, r6
 80020bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020c0:	4e2e      	ldr	r6, [pc, #184]	; (800217c <_malloc_r+0xe4>)
 80020c2:	f000 f89d 	bl	8002200 <__malloc_lock>
 80020c6:	6833      	ldr	r3, [r6, #0]
 80020c8:	461c      	mov	r4, r3
 80020ca:	bb34      	cbnz	r4, 800211a <_malloc_r+0x82>
 80020cc:	4629      	mov	r1, r5
 80020ce:	4638      	mov	r0, r7
 80020d0:	f7ff ffc2 	bl	8002058 <sbrk_aligned>
 80020d4:	1c43      	adds	r3, r0, #1
 80020d6:	4604      	mov	r4, r0
 80020d8:	d14d      	bne.n	8002176 <_malloc_r+0xde>
 80020da:	6834      	ldr	r4, [r6, #0]
 80020dc:	4626      	mov	r6, r4
 80020de:	2e00      	cmp	r6, #0
 80020e0:	d140      	bne.n	8002164 <_malloc_r+0xcc>
 80020e2:	6823      	ldr	r3, [r4, #0]
 80020e4:	4631      	mov	r1, r6
 80020e6:	4638      	mov	r0, r7
 80020e8:	eb04 0803 	add.w	r8, r4, r3
 80020ec:	f000 f878 	bl	80021e0 <_sbrk_r>
 80020f0:	4580      	cmp	r8, r0
 80020f2:	d13a      	bne.n	800216a <_malloc_r+0xd2>
 80020f4:	6821      	ldr	r1, [r4, #0]
 80020f6:	3503      	adds	r5, #3
 80020f8:	1a6d      	subs	r5, r5, r1
 80020fa:	f025 0503 	bic.w	r5, r5, #3
 80020fe:	3508      	adds	r5, #8
 8002100:	2d0c      	cmp	r5, #12
 8002102:	bf38      	it	cc
 8002104:	250c      	movcc	r5, #12
 8002106:	4629      	mov	r1, r5
 8002108:	4638      	mov	r0, r7
 800210a:	f7ff ffa5 	bl	8002058 <sbrk_aligned>
 800210e:	3001      	adds	r0, #1
 8002110:	d02b      	beq.n	800216a <_malloc_r+0xd2>
 8002112:	6823      	ldr	r3, [r4, #0]
 8002114:	442b      	add	r3, r5
 8002116:	6023      	str	r3, [r4, #0]
 8002118:	e00e      	b.n	8002138 <_malloc_r+0xa0>
 800211a:	6822      	ldr	r2, [r4, #0]
 800211c:	1b52      	subs	r2, r2, r5
 800211e:	d41e      	bmi.n	800215e <_malloc_r+0xc6>
 8002120:	2a0b      	cmp	r2, #11
 8002122:	d916      	bls.n	8002152 <_malloc_r+0xba>
 8002124:	1961      	adds	r1, r4, r5
 8002126:	42a3      	cmp	r3, r4
 8002128:	6025      	str	r5, [r4, #0]
 800212a:	bf18      	it	ne
 800212c:	6059      	strne	r1, [r3, #4]
 800212e:	6863      	ldr	r3, [r4, #4]
 8002130:	bf08      	it	eq
 8002132:	6031      	streq	r1, [r6, #0]
 8002134:	5162      	str	r2, [r4, r5]
 8002136:	604b      	str	r3, [r1, #4]
 8002138:	4638      	mov	r0, r7
 800213a:	f104 060b 	add.w	r6, r4, #11
 800213e:	f000 f865 	bl	800220c <__malloc_unlock>
 8002142:	f026 0607 	bic.w	r6, r6, #7
 8002146:	1d23      	adds	r3, r4, #4
 8002148:	1af2      	subs	r2, r6, r3
 800214a:	d0b6      	beq.n	80020ba <_malloc_r+0x22>
 800214c:	1b9b      	subs	r3, r3, r6
 800214e:	50a3      	str	r3, [r4, r2]
 8002150:	e7b3      	b.n	80020ba <_malloc_r+0x22>
 8002152:	6862      	ldr	r2, [r4, #4]
 8002154:	42a3      	cmp	r3, r4
 8002156:	bf0c      	ite	eq
 8002158:	6032      	streq	r2, [r6, #0]
 800215a:	605a      	strne	r2, [r3, #4]
 800215c:	e7ec      	b.n	8002138 <_malloc_r+0xa0>
 800215e:	4623      	mov	r3, r4
 8002160:	6864      	ldr	r4, [r4, #4]
 8002162:	e7b2      	b.n	80020ca <_malloc_r+0x32>
 8002164:	4634      	mov	r4, r6
 8002166:	6876      	ldr	r6, [r6, #4]
 8002168:	e7b9      	b.n	80020de <_malloc_r+0x46>
 800216a:	230c      	movs	r3, #12
 800216c:	603b      	str	r3, [r7, #0]
 800216e:	4638      	mov	r0, r7
 8002170:	f000 f84c 	bl	800220c <__malloc_unlock>
 8002174:	e7a1      	b.n	80020ba <_malloc_r+0x22>
 8002176:	6025      	str	r5, [r4, #0]
 8002178:	e7de      	b.n	8002138 <_malloc_r+0xa0>
 800217a:	bf00      	nop
 800217c:	2000009c 	.word	0x2000009c

08002180 <_realloc_r>:
 8002180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002184:	4680      	mov	r8, r0
 8002186:	4614      	mov	r4, r2
 8002188:	460e      	mov	r6, r1
 800218a:	b921      	cbnz	r1, 8002196 <_realloc_r+0x16>
 800218c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002190:	4611      	mov	r1, r2
 8002192:	f7ff bf81 	b.w	8002098 <_malloc_r>
 8002196:	b92a      	cbnz	r2, 80021a4 <_realloc_r+0x24>
 8002198:	f7ff ff12 	bl	8001fc0 <_free_r>
 800219c:	4625      	mov	r5, r4
 800219e:	4628      	mov	r0, r5
 80021a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021a4:	f000 f838 	bl	8002218 <_malloc_usable_size_r>
 80021a8:	4284      	cmp	r4, r0
 80021aa:	4607      	mov	r7, r0
 80021ac:	d802      	bhi.n	80021b4 <_realloc_r+0x34>
 80021ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80021b2:	d812      	bhi.n	80021da <_realloc_r+0x5a>
 80021b4:	4621      	mov	r1, r4
 80021b6:	4640      	mov	r0, r8
 80021b8:	f7ff ff6e 	bl	8002098 <_malloc_r>
 80021bc:	4605      	mov	r5, r0
 80021be:	2800      	cmp	r0, #0
 80021c0:	d0ed      	beq.n	800219e <_realloc_r+0x1e>
 80021c2:	42bc      	cmp	r4, r7
 80021c4:	4622      	mov	r2, r4
 80021c6:	4631      	mov	r1, r6
 80021c8:	bf28      	it	cs
 80021ca:	463a      	movcs	r2, r7
 80021cc:	f7ff fed0 	bl	8001f70 <memcpy>
 80021d0:	4631      	mov	r1, r6
 80021d2:	4640      	mov	r0, r8
 80021d4:	f7ff fef4 	bl	8001fc0 <_free_r>
 80021d8:	e7e1      	b.n	800219e <_realloc_r+0x1e>
 80021da:	4635      	mov	r5, r6
 80021dc:	e7df      	b.n	800219e <_realloc_r+0x1e>
	...

080021e0 <_sbrk_r>:
 80021e0:	b538      	push	{r3, r4, r5, lr}
 80021e2:	4d06      	ldr	r5, [pc, #24]	; (80021fc <_sbrk_r+0x1c>)
 80021e4:	2300      	movs	r3, #0
 80021e6:	4604      	mov	r4, r0
 80021e8:	4608      	mov	r0, r1
 80021ea:	602b      	str	r3, [r5, #0]
 80021ec:	f7fe fa06 	bl	80005fc <_sbrk>
 80021f0:	1c43      	adds	r3, r0, #1
 80021f2:	d102      	bne.n	80021fa <_sbrk_r+0x1a>
 80021f4:	682b      	ldr	r3, [r5, #0]
 80021f6:	b103      	cbz	r3, 80021fa <_sbrk_r+0x1a>
 80021f8:	6023      	str	r3, [r4, #0]
 80021fa:	bd38      	pop	{r3, r4, r5, pc}
 80021fc:	200000a4 	.word	0x200000a4

08002200 <__malloc_lock>:
 8002200:	4801      	ldr	r0, [pc, #4]	; (8002208 <__malloc_lock+0x8>)
 8002202:	f000 b811 	b.w	8002228 <__retarget_lock_acquire_recursive>
 8002206:	bf00      	nop
 8002208:	200000a8 	.word	0x200000a8

0800220c <__malloc_unlock>:
 800220c:	4801      	ldr	r0, [pc, #4]	; (8002214 <__malloc_unlock+0x8>)
 800220e:	f000 b80c 	b.w	800222a <__retarget_lock_release_recursive>
 8002212:	bf00      	nop
 8002214:	200000a8 	.word	0x200000a8

08002218 <_malloc_usable_size_r>:
 8002218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800221c:	1f18      	subs	r0, r3, #4
 800221e:	2b00      	cmp	r3, #0
 8002220:	bfbc      	itt	lt
 8002222:	580b      	ldrlt	r3, [r1, r0]
 8002224:	18c0      	addlt	r0, r0, r3
 8002226:	4770      	bx	lr

08002228 <__retarget_lock_acquire_recursive>:
 8002228:	4770      	bx	lr

0800222a <__retarget_lock_release_recursive>:
 800222a:	4770      	bx	lr

0800222c <_init>:
 800222c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800222e:	bf00      	nop
 8002230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002232:	bc08      	pop	{r3}
 8002234:	469e      	mov	lr, r3
 8002236:	4770      	bx	lr

08002238 <_fini>:
 8002238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800223a:	bf00      	nop
 800223c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800223e:	bc08      	pop	{r3}
 8002240:	469e      	mov	lr, r3
 8002242:	4770      	bx	lr
